

warning: unused variable: `min_active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:229:6
    |
229 |     let min_active_size= evolutiondata.min_active_size;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_active_size`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `max_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:231:6
    |
231 |     let max_proc_num= evolutiondata.max_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_num`

warning: unused variable: `min_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:232:6
    |
232 |     let min_proc_num= evolutiondata.min_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_num`

warning: unused variable: `max_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:234:6
    |
234 |     let max_proc_step= evolutiondata.max_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_step`

warning: unused variable: `min_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:235:6
    |
235 |     let min_proc_step= evolutiondata.min_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_step`

warning: unused variable: `max_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:237:6
    |
237 |     let max_search_num= evolutiondata.max_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_search_num`

warning: unused variable: `min_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:238:6
    |
238 |     let min_search_num= evolutiondata.min_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_search_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:240:6
    |
240 |     let max_prune_num= evolutiondata.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `min_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:241:6
    |
241 |     let min_prune_num= evolutiondata.min_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_prune_num`

warning: unused variable: `max_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:380:6
    |
380 |     let max_proc_num= evolutiondata.max_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_num`

warning: unused variable: `min_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:381:6
    |
381 |     let min_proc_num= evolutiondata.min_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_num`

warning: unused variable: `max_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:383:6
    |
383 |     let max_proc_step= evolutiondata.max_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_step`

warning: unused variable: `min_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:384:6
    |
384 |     let min_proc_step= evolutiondata.min_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_step`

warning: unused variable: `min_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:387:6
    |
387 |     let min_search_num= evolutiondata.min_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_search_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:389:6
    |
389 |     let max_prune_num= evolutiondata.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `min_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:390:6
    |
390 |     let min_prune_num= evolutiondata.min_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_prune_num`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:471:6
    |
471 |     let mut samples_u64 = samples.cast::<u64>();
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `min_active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:662:6
    |
662 |     let min_active_size= evolutiondata.min_active_size;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_active_size`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:742:6
    |
742 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:743:6
    |
743 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:744:6
    |
744 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:745:6
    |
745 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:748:6
    |
748 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:751:6
    |
751 |     let time_step: f64 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:752:6
    |
752 |     let nratio: f64 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:753:6
    |
753 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:754:6
    |
754 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:755:6
    |
755 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:756:6
    |
756 |     let con_rad: f64 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:757:6
    |
757 |     let init_prob: f64 = netdata.init_prob.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `del_neuron_rate`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:759:6
    |
759 |     let del_neuron_rate: f64 = netdata.del_neuron_rate.clone();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:760:6
    |
760 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:761:6
    |
761 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:762:6
    |
762 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `min_active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:774:6
    |
774 |     let min_active_size= evolutiondata.min_active_size;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_active_size`

warning: unused variable: `max_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:776:6
    |
776 |     let max_proc_num= evolutiondata.max_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_num`

warning: unused variable: `min_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:777:6
    |
777 |     let min_proc_num= evolutiondata.min_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_num`

warning: unused variable: `max_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:779:6
    |
779 |     let max_proc_step= evolutiondata.max_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_step`

warning: unused variable: `min_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:780:6
    |
780 |     let min_proc_step= evolutiondata.min_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_step`

warning: unused variable: `min_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:783:6
    |
783 |     let min_search_num= evolutiondata.min_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_search_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:785:6
    |
785 |     let max_prune_num= evolutiondata.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `min_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:786:6
    |
786 |     let min_prune_num= evolutiondata.min_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_prune_num`

warning: value assigned to `curidx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1138:11
     |
1138 |         let mut curidx = 0;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:798:6
    |
798 |     let mut hidden_size = active_size-output_size-input_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1002:6
     |
1002 |     let mut next_active_size = next_active_size_vec[0];
     |         ----^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1013:6
     |
1013 |     let mut sel_active_size = newactive_size_hash[&proc_num].clone();
     |         ----^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1130:7
     |
1130 |         let mut del_neuron_num  = (active_size - next_active_size) as usize;
     |             ----^^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: value assigned to `selected_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1501:10
     |
1501 |     let mut selected_idx = 0;
     |             ^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `max_success_idx`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1489:2
     |
1489 |     max_success_idx:  u64,
     |     ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_success_idx`

warning: unused variable: `output_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:62:7
   |
62 |         let output_size = y.dims()[0];
   |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `t1`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:189:11
    |
189 |         let (t0,t1) = arrayfire::sum_all(&v0);
    |                 ^^ help: if this is intentional, prefix it with an underscore: `_t1`

warning: unused variable: `t1`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:464:11
    |
464 |         let (t0,t1) = arrayfire::sum_all(&v0);
    |                 ^^ help: if this is intentional, prefix it with an underscore: `_t1`

warning: unused variable: `min_active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:229:6
    |
229 |     let min_active_size= evolutiondata.min_active_size;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_active_size`

warning: unused variable: `max_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:231:6
    |
231 |     let max_proc_num= evolutiondata.max_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_num`

warning: unused variable: `min_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:232:6
    |
232 |     let min_proc_num= evolutiondata.min_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_num`

warning: unused variable: `max_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:234:6
    |
234 |     let max_proc_step= evolutiondata.max_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_step`

warning: unused variable: `min_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:235:6
    |
235 |     let min_proc_step= evolutiondata.min_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_step`

warning: unused variable: `max_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:237:6
    |
237 |     let max_search_num= evolutiondata.max_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_search_num`

warning: unused variable: `min_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:238:6
    |
238 |     let min_search_num= evolutiondata.min_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_search_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:240:6
    |
240 |     let max_prune_num= evolutiondata.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `min_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:241:6
    |
241 |     let min_prune_num= evolutiondata.min_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_prune_num`

warning: unused variable: `max_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:380:6
    |
380 |     let max_proc_num= evolutiondata.max_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_num`

warning: unused variable: `min_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:381:6
    |
381 |     let min_proc_num= evolutiondata.min_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_num`

warning: unused variable: `max_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:383:6
    |
383 |     let max_proc_step= evolutiondata.max_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_step`

warning: unused variable: `min_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:384:6
    |
384 |     let min_proc_step= evolutiondata.min_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_step`

warning: unused variable: `min_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:387:6
    |
387 |     let min_search_num= evolutiondata.min_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_search_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:389:6
    |
389 |     let max_prune_num= evolutiondata.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `min_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:390:6
    |
390 |     let min_prune_num= evolutiondata.min_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_prune_num`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:471:6
    |
471 |     let mut samples_u64 = samples.cast::<u64>();
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `min_active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:662:6
    |
662 |     let min_active_size= evolutiondata.min_active_size;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_active_size`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:742:6
    |
742 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:743:6
    |
743 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:744:6
    |
744 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:745:6
    |
745 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:748:6
    |
748 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:751:6
    |
751 |     let time_step: f32 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:752:6
    |
752 |     let nratio: f32 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:753:6
    |
753 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:754:6
    |
754 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:755:6
    |
755 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:756:6
    |
756 |     let con_rad: f32 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:757:6
    |
757 |     let init_prob: f32 = netdata.init_prob.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `del_neuron_rate`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:759:6
    |
759 |     let del_neuron_rate: f32 = netdata.del_neuron_rate.clone();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:760:6
    |
760 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:761:6
    |
761 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:762:6
    |
762 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `min_active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:774:6
    |
774 |     let min_active_size= evolutiondata.min_active_size;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_active_size`

warning: unused variable: `max_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:776:6
    |
776 |     let max_proc_num= evolutiondata.max_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_num`

warning: unused variable: `min_proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:777:6
    |
777 |     let min_proc_num= evolutiondata.min_proc_num;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_num`

warning: unused variable: `max_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:779:6
    |
779 |     let max_proc_step= evolutiondata.max_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_proc_step`

warning: unused variable: `min_proc_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:780:6
    |
780 |     let min_proc_step= evolutiondata.min_proc_step;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_proc_step`

warning: unused variable: `min_search_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:783:6
    |
783 |     let min_search_num= evolutiondata.min_search_num;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_search_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:785:6
    |
785 |     let max_prune_num= evolutiondata.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `min_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:786:6
    |
786 |     let min_prune_num= evolutiondata.min_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_prune_num`

warning: value assigned to `curidx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1138:11
     |
1138 |         let mut curidx = 0;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:798:6
    |
798 |     let mut hidden_size = active_size-output_size-input_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1002:6
     |
1002 |     let mut next_active_size = next_active_size_vec[0];
     |         ----^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1013:6
     |
1013 |     let mut sel_active_size = newactive_size_hash[&proc_num].clone();
     |         ----^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1130:7
     |
1130 |         let mut del_neuron_num  = (active_size - next_active_size) as usize;
     |             ----^^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: value assigned to `selected_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1501:10
     |
1501 |     let mut selected_idx = 0;
     |             ^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `max_success_idx`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1489:2
     |
1489 |     max_success_idx:  u64,
     |     ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_success_idx`

warning: unused variable: `output_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:62:7
   |
62 |         let output_size = y.dims()[0];
   |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `t1`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:189:11
    |
189 |         let (t0,t1) = arrayfire::sum_all(&v0);
    |                 ^^ help: if this is intentional, prefix it with an underscore: `_t1`

warning: unused variable: `t1`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:464:11
    |
464 |         let (t0,t1) = arrayfire::sum_all(&v0);
    |                 ^^ help: if this is intentional, prefix it with an underscore: `_t1`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:182:9
    |
182 |     let mut new_neural_network =    neural_network_type {
    |         ----^^^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:258:7
    |
258 |         let input_size: u64 = netdata.input_size.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:259:7
    |
259 |         let output_size: u64 = netdata.output_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:260:7
    |
260 |         let proc_num: u64 = netdata.proc_num.clone();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:261:7
    |
261 |         let active_size: u64 = netdata.active_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:262:7
    |
262 |         let space_dims: u64 = netdata.space_dims.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:263:7
    |
263 |         let step_num: u64 = netdata.step_num.clone();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:266:7
    |
266 |         let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:269:7
    |
269 |         let time_step: f64 = netdata.time_step.clone();
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:270:7
    |
270 |         let nratio: f64 = netdata.nratio.clone();
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:272:7
    |
272 |         let sphere_rad: f64 = netdata.sphere_rad.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:273:7
    |
273 |         let neuron_rad: f64 = netdata.neuron_rad.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:274:7
    |
274 |         let con_rad: f64 = netdata.con_rad.clone();
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:275:7
    |
275 |         let center_const: f64 = netdata.center_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:276:7
    |
276 |         let spring_const: f64 = netdata.spring_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:277:7
    |
277 |         let repel_const: f64 = netdata.repel_const.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:312:9
    |
312 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:313:9
    |
313 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:314:9
    |
314 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:315:9
    |
315 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:316:9
    |
316 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:317:9
    |
317 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:320:9
    |
320 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:323:9
    |
323 |     let time_step: f64 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:324:9
    |
324 |     let nratio: f64 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:326:9
    |
326 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:327:9
    |
327 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:328:9
    |
328 |     let con_rad: f64 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:329:9
    |
329 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:330:9
    |
330 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:331:9
    |
331 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `valsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:377:13
    |
377 |     let mut valsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `output_degree` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:383:13
    |
383 |     let mut output_degree = 0;
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:385:9
    |
385 |     for i in 0..depth
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `tempx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:503:13
    |
503 |     let mut tempx =  arrayfire::slice(X, 0);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `inx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:736:13
    |
736 |     let mut inx = arrayfire::constant::<f64>(0.0,S_dims);
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:738:13
    |
738 |     let mut tempx =  arrayfire::slice(X, 0);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Xtemp` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:744:13
    |
744 |     let mut Xtemp = arrayfire::slice(Z, 0);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sA` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:747:13
    |
747 |     let mut sA = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sB` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:748:13
    |
748 |     let mut sB = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sC` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:749:13
    |
749 |     let mut sC = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sD` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:750:13
    |
750 |     let mut sD = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sE` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:751:13
    |
751 |     let mut sE = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempW` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:766:13
    |
766 |     let mut tempW = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `gtemperr`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:769:13
    |
769 |     let mut gtemperr = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_gtemperr`

warning: value assigned to `tempinx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:770:13
    |
770 |     let mut tempinx = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempdX` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:774:13
    |
774 |     let mut tempdX = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempgW` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:775:13
    |
775 |     let mut tempgW = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempgH` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:776:13
    |
776 |     let mut tempgH = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `derror` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:781:13
    |
781 |     let mut derror = arrayfire::slice(&total_error,  0);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sliceseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:789:13
    |
789 |     let mut sliceseq = arrayfire::Seq::new((proc_num-1) as f64, (Qslices-1) as f64, 1.0);
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `keys`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:794:13
    |
794 |     let mut keys = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_keys`

warning: unused variable: `vals`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:795:13
    |
795 |     let mut vals = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_vals`

warning: value assigned to `UAFgroup` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:800:13
    |
800 |     let mut UAFgroup = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tileerror` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:801:13
    |
801 |     let mut tileerror = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:769:9
    |
769 |     let mut gtemperr = arrayfire::constant::<f64>(0.0,temp_dims);
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:794:9
    |
794 |     let mut keys = arrayfire::constant::<i32>(0,temp_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:795:9
    |
795 |     let mut vals = arrayfire::constant::<f64>(0.0,temp_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f64.rs:82:6
   |
82 |     let mut temp2 = -arrayfire::abs(C);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `E`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f64.rs:200:2
    |
200 |     E: &arrayfire::Array<f64>,
    |     ^ help: if this is intentional, prefix it with an underscore: `_E`

warning: unused variable: `max_cols_i32`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:33:6
   |
33 |     let max_cols_i32 = max_cols as i32;
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_cols_i32`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:81:7
   |
81 |         let mut valsel = COO_batch_find(WRowIdxCOO,&cur_key, COO_batch_size);
   |             ----^^^^^^
   |             |
   |             help: remove this `mut`

warning: unused variable: `max_cols_i32`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:143:6
    |
143 |     let max_cols_i32 = max_cols as i32;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_cols_i32`

warning: unused variable: `max_cols_usize`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:144:6
    |
144 |     let max_cols_usize = max_cols as usize;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_cols_usize`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:178:6
    |
178 |     let mut valsel = COO_batch_find(WRowIdxCOO,&cur_key, COO_batch_size);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:236:7
    |
236 |         let mut valsel = COO_batch_find(WRowIdxCOO,&cur_key, COO_batch_size);
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `dist_start` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:451:10
    |
451 |     let mut dist_start = dist_start_map[&0];
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:452:10
    |
452 |     let mut dist_end = dist_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:453:10
    |
453 |     let mut dist_num = dist_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `j`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:506:7
    |
506 |         for j in 1..dist_num
    |             ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: value assigned to `dist_start` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:570:10
    |
570 |     let mut dist_start = dist_UAF_start_map[&0];
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:571:10
    |
571 |     let mut dist_end = dist_UAF_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:572:10
    |
572 |     let mut dist_num = dist_UAF_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:644:10
    |
644 |     let mut dist_end = dist_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:645:10
    |
645 |     let mut dist_num = dist_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newWValues` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:657:10
    |
657 |     let mut newWValues = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:769:10
    |
769 |     let mut dist_end = dist_UAF_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:770:10
    |
770 |     let mut dist_num = dist_UAF_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newH` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:782:10
    |
782 |     let mut newH = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newA` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:783:10
    |
783 |     let mut newA = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newB` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:784:10
    |
784 |     let mut newB = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newC` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:785:10
    |
785 |     let mut newC = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newD` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:786:10
    |
786 |     let mut newD = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newE` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:787:10
    |
787 |     let mut newE = arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:182:9
    |
182 |     let mut new_neural_network =    neural_network_type {
    |         ----^^^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:258:7
    |
258 |         let input_size: u64 = netdata.input_size.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:259:7
    |
259 |         let output_size: u64 = netdata.output_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:260:7
    |
260 |         let proc_num: u64 = netdata.proc_num.clone();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:261:7
    |
261 |         let active_size: u64 = netdata.active_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:262:7
    |
262 |         let space_dims: u64 = netdata.space_dims.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:263:7
    |
263 |         let step_num: u64 = netdata.step_num.clone();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:266:7
    |
266 |         let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:269:7
    |
269 |         let time_step: f32 = netdata.time_step.clone();
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:270:7
    |
270 |         let nratio: f32 = netdata.nratio.clone();
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:272:7
    |
272 |         let sphere_rad: f32 = netdata.sphere_rad.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:273:7
    |
273 |         let neuron_rad: f32 = netdata.neuron_rad.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:274:7
    |
274 |         let con_rad: f32 = netdata.con_rad.clone();
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:275:7
    |
275 |         let center_const: f32 = netdata.center_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:276:7
    |
276 |         let spring_const: f32 = netdata.spring_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:277:7
    |
277 |         let repel_const: f32 = netdata.repel_const.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:312:9
    |
312 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:313:9
    |
313 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:314:9
    |
314 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:315:9
    |
315 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:316:9
    |
316 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:317:9
    |
317 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:320:9
    |
320 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:323:9
    |
323 |     let time_step: f32 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:324:9
    |
324 |     let nratio: f32 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:326:9
    |
326 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:327:9
    |
327 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:328:9
    |
328 |     let con_rad: f32 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:329:9
    |
329 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:330:9
    |
330 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:331:9
    |
331 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `valsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:377:13
    |
377 |     let mut valsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `output_degree` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:383:13
    |
383 |     let mut output_degree = 0;
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:385:9
    |
385 |     for i in 0..depth
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `inx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:751:13
    |
751 |     let mut inx = arrayfire::constant::<f32>(0.0,S_dims);
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:754:13
    |
754 |     let mut tempx =  arrayfire::slice(X, 0); // extracting the first slice of X matrix
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Xtemp` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:760:13
    |
760 |     let mut Xtemp = arrayfire::slice(Z, 0); // extracting the first slice of Z matrix
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sA` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:763:13
    |
763 |     let mut sA = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sB` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:764:13
    |
764 |     let mut sB = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sC` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:765:13
    |
765 |     let mut sC = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sD` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:766:13
    |
766 |     let mut sD = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sE` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:767:13
    |
767 |     let mut sE = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempW` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:782:13
    |
782 |     let mut tempW = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `gtemperr`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:784:13
    |
784 |     let mut gtemperr = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_gtemperr`

warning: value assigned to `tempinx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:785:13
    |
785 |     let mut tempinx = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempdX` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:789:13
    |
789 |     let mut tempdX = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempgW` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:790:13
    |
790 |     let mut tempgW = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempgH` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:791:13
    |
791 |     let mut tempgH = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `derror` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:811:13
    |
811 |     let mut derror = arrayfire::slice(&total_error,  0);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sliceseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:820:13
    |
820 |     let mut sliceseq = arrayfire::Seq::new((proc_num-1) as f32, (Qslices-1) as f32, 1.0);
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `keys`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:825:13
    |
825 |     let mut keys = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_keys`

warning: unused variable: `vals`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:826:13
    |
826 |     let mut vals = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_vals`

warning: value assigned to `UAFgroup` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:831:13
    |
831 |     let mut UAFgroup = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tileerror` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:832:13
    |
832 |     let mut tileerror = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `a`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:908:13
    |
908 |         let a = arrayfire::lookup(grad, &Hidxsel_out[&i], 0);
    |             ^ help: if this is intentional, prefix it with an underscore: `_a`

warning: unused variable: `b`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:918:13
    |
918 |         let b = arrayfire::sum(&dX, 1);
    |             ^ help: if this is intentional, prefix it with an underscore: `_b`

warning: unused variable: `c`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:956:13
    |
956 |         let c = arrayfire::sum(&UAFgroup, 1);
    |             ^ help: if this is intentional, prefix it with an underscore: `_c`

warning: unused variable: `d`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:957:13
    |
957 |         let d = arrayfire::lookup(grad, &combidxsel_out[&i],0);
    |             ^ help: if this is intentional, prefix it with an underscore: `_d`

warning: unused variable: `e`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:1054:13
     |
1054 |         let e = arrayfire::sum(&tempgW, 1);
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `f`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:1055:13
     |
1055 |         let f = arrayfire::lookup(grad, &valsel_out[&i], 0);
     |             ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:784:9
    |
784 |     let mut gtemperr = arrayfire::constant::<f32>(0.0,temp_dims);
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:825:9
    |
825 |     let mut keys = arrayfire::constant::<i32>(0,temp_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:826:9
    |
826 |     let mut vals = arrayfire::constant::<f32>(0.0,temp_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f32.rs:82:6
   |
82 |     let mut temp2 = -arrayfire::abs(C);
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `E`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f32.rs:200:2
    |
200 |     E: &arrayfire::Array<f32>,
    |     ^ help: if this is intentional, prefix it with an underscore: `_E`

warning: unused variable: `max_cols_i32`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:33:6
   |
33 |     let max_cols_i32 = max_cols as i32;
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_cols_i32`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:81:7
   |
81 |         let mut valsel = COO_batch_find(WRowIdxCOO,&cur_key, COO_batch_size);
   |             ----^^^^^^
   |             |
   |             help: remove this `mut`

warning: unused variable: `max_cols_i32`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:143:6
    |
143 |     let max_cols_i32 = max_cols as i32;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_cols_i32`

warning: unused variable: `max_cols_usize`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:144:6
    |
144 |     let max_cols_usize = max_cols as usize;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_cols_usize`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:178:6
    |
178 |     let mut valsel = COO_batch_find(WRowIdxCOO,&cur_key, COO_batch_size);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:236:7
    |
236 |         let mut valsel = COO_batch_find(WRowIdxCOO,&cur_key, COO_batch_size);
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `dist_start` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:451:10
    |
451 |     let mut dist_start = dist_start_map[&0];
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:452:10
    |
452 |     let mut dist_end = dist_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:453:10
    |
453 |     let mut dist_num = dist_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `j`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:506:7
    |
506 |         for j in 1..dist_num
    |             ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: value assigned to `dist_start` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:570:10
    |
570 |     let mut dist_start = dist_UAF_start_map[&0];
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:571:10
    |
571 |     let mut dist_end = dist_UAF_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:572:10
    |
572 |     let mut dist_num = dist_UAF_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:644:10
    |
644 |     let mut dist_end = dist_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:645:10
    |
645 |     let mut dist_num = dist_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newWValues` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:657:10
    |
657 |     let mut newWValues = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:769:10
    |
769 |     let mut dist_end = dist_UAF_end_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dist_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:770:10
    |
770 |     let mut dist_num = dist_UAF_num_map[&0];
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newH` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:782:10
    |
782 |     let mut newH = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newA` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:783:10
    |
783 |     let mut newA = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newB` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:784:10
    |
784 |     let mut newB = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newC` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:785:10
    |
785 |     let mut newC = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newD` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:786:10
    |
786 |     let mut newD = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `newE` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:787:10
    |
787 |     let mut newE = arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f64.rs:27:6
   |
27 |     let mut cmp2 = arrayfire::lt(pos , &neg_cube_size, false);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f64.rs:46:6
   |
46 |     let mut cmp2 = arrayfire::lt(&neg_cube_size,  pos, false);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `pos_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/distance_f64.rs:166:6
    |
166 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:282:7
    |
282 |         let neuron_size: u64 = netdata.neuron_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:283:7
    |
283 |         let input_size: u64 = netdata.input_size.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:284:7
    |
284 |         let output_size: u64 = netdata.output_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:285:7
    |
285 |         let proc_num: u64 = netdata.proc_num.clone();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:289:7
    |
289 |         let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:293:7
    |
293 |         let neuron_std: f64 = netdata.neuron_std.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:296:7
    |
296 |         let con_rad: f64 = netdata.con_rad.clone();
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:297:7
    |
297 |         let center_const: f64 = netdata.center_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:298:7
    |
298 |         let spring_const: f64 = netdata.spring_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:299:7
    |
299 |         let repel_const: f64 = netdata.repel_const.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:315:7
    |
315 |         for i in 0u64..active_size
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:502:6
    |
502 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:503:6
    |
503 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:504:6
    |
504 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:505:6
    |
505 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:509:6
    |
509 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:513:6
    |
513 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:516:6
    |
516 |     let con_rad: f64 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:517:6
    |
517 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:518:6
    |
518 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:519:6
    |
519 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:523:6
    |
523 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:524:6
    |
524 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:557:6
    |
557 |     let single_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:530:6
    |
530 |     let mut phi = two*std::f64::consts::PI*arrayfire::randu::<f64>(generate_dims);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:657:6
    |
657 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:658:6
    |
658 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:659:6
    |
659 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:660:6
    |
660 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:664:6
    |
664 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:668:6
    |
668 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:671:6
    |
671 |     let con_rad: f64 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:672:6
    |
672 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:673:6
    |
673 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:674:6
    |
674 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:678:6
    |
678 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:679:6
    |
679 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:712:6
    |
712 |     let single_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:685:6
    |
685 |     let mut phi = two*std::f64::consts::PI*arrayfire::randu::<f64>(generate_dims);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:874:6
    |
874 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:876:6
    |
876 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:877:6
    |
877 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:878:6
    |
878 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:879:6
    |
879 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:883:6
    |
883 |     let time_step: f64 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:884:6
    |
884 |     let nratio: f64 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:885:6
    |
885 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:886:6
    |
886 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:887:6
    |
887 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:888:6
    |
888 |     let con_rad: f64 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:889:6
    |
889 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:890:6
    |
890 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:891:6
    |
891 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:927:6
    |
927 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:928:6
    |
928 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:929:6
    |
929 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:930:6
    |
930 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1008:6
     |
1008 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1009:6
     |
1009 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1010:6
     |
1010 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1011:6
     |
1011 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1016:6
     |
1016 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1017:6
     |
1017 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1019:6
     |
1019 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1020:6
     |
1020 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1021:6
     |
1021 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1022:6
     |
1022 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1023:6
     |
1023 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1024:6
     |
1024 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1025:6
     |
1025 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1282:6
     |
1282 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1283:6
     |
1283 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1284:6
     |
1284 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1285:6
     |
1285 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1290:6
     |
1290 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1291:6
     |
1291 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1293:6
     |
1293 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1294:6
     |
1294 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1295:6
     |
1295 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1296:6
     |
1296 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1297:6
     |
1297 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1298:6
     |
1298 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1299:6
     |
1299 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1323:13
     |
1323 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1324:13
     |
1324 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1312:6
     |
1312 |     let mut input_neurons = arrayfire::rows(neuron_pos, 0, (input_size-1)  as i64);
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1314:6
     |
1314 |     let mut hidden_neurons = arrayfire::rows(neuron_pos, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1453:6
     |
1453 |     let mut hidden_idx = arrayfire::rows(neuron_idx, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1483:6
     |
1483 |     let mut tile_dims = arrayfire::Dim4::new(&[input_size,1,1,1]);
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1571:6
     |
1571 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1572:6
     |
1572 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1573:6
     |
1573 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1574:6
     |
1574 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1579:6
     |
1579 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1580:6
     |
1580 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1582:6
     |
1582 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1583:6
     |
1583 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1584:6
     |
1584 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1585:6
     |
1585 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1586:6
     |
1586 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1587:6
     |
1587 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1588:6
     |
1588 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1612:13
     |
1612 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1613:13
     |
1613 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1601:6
     |
1601 |     let mut hidden_neurons = arrayfire::rows(neuron_pos, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1604:6
     |
1604 |     let mut output_neurons = arrayfire::rows(neuron_pos, (neuron_num-output_size) as i64, (neuron_num-1)  as i64);
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1742:6
     |
1742 |     let mut hidden_idx = arrayfire::rows(neuron_idx, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1767:6
     |
1767 |     let mut output_idx = arrayfire::rows(neuron_idx, (neuron_num-output_size) as i64, (neuron_num-1)  as i64);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1780:6
     |
1780 |     let mut tile_dims = arrayfire::Dim4::new(&[output_size,1,1,1]);
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1853:6
     |
1853 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1854:6
     |
1854 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1921:6
     |
1921 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1922:6
     |
1922 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1923:6
     |
1923 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1924:6
     |
1924 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1925:6
     |
1925 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1926:6
     |
1926 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1931:6
     |
1931 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1932:6
     |
1932 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1934:6
     |
1934 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1938:6
     |
1938 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1939:6
     |
1939 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:1940:6
     |
1940 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `neuron_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2120:6
     |
2120 |     let neuron_size: u64 = netdata.neuron_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2121:6
     |
2121 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2122:6
     |
2122 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2123:6
     |
2123 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2124:6
     |
2124 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2125:6
     |
2125 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2126:6
     |
2126 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2131:6
     |
2131 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2132:6
     |
2132 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2133:6
     |
2133 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2134:6
     |
2134 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2138:6
     |
2138 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2139:6
     |
2139 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2140:6
     |
2140 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2295:6
     |
2295 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2296:6
     |
2296 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2297:6
     |
2297 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2298:6
     |
2298 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2299:6
     |
2299 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2300:6
     |
2300 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2305:6
     |
2305 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2306:6
     |
2306 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2308:6
     |
2308 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2309:6
     |
2309 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2310:6
     |
2310 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2311:6
     |
2311 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2312:6
     |
2312 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2313:6
     |
2313 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2314:6
     |
2314 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2338:13
     |
2338 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2339:13
     |
2339 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2565:6
     |
2565 |     let active_size: u64 = (*netdata).active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2566:6
     |
2566 |     let space_dims: u64 = (*netdata).space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2567:6
     |
2567 |     let step_num: u64 = (*netdata).step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2571:6
     |
2571 |     let time_step: f64 = (*netdata).time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2572:6
     |
2572 |     let nratio: f64 = (*netdata).nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2573:6
     |
2573 |     let neuron_std: f64 = (*netdata).neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2574:6
     |
2574 |     let sphere_rad: f64 = (*netdata).sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2575:6
     |
2575 |     let neuron_rad: f64 = (*netdata).neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2576:6
     |
2576 |     let con_rad: f64 = (*netdata).con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2577:6
     |
2577 |     let init_prob: f64 = (*netdata).init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2578:6
     |
2578 |     let center_const: f64 = (*netdata).center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2579:6
     |
2579 |     let spring_const: f64 = (*netdata).spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2580:6
     |
2580 |     let repel_const: f64 = (*netdata).repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2685:6
     |
2685 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2686:6
     |
2686 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2687:6
     |
2687 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2688:6
     |
2688 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2693:6
     |
2693 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2694:6
     |
2694 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2695:6
     |
2695 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2696:6
     |
2696 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2697:6
     |
2697 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2698:6
     |
2698 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2699:6
     |
2699 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2700:6
     |
2700 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2701:6
     |
2701 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2702:6
     |
2702 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2708:6
     |
2708 |     let mut active_size = neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2773:6
     |
2773 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2774:6
     |
2774 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2775:6
     |
2775 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2776:6
     |
2776 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2781:6
     |
2781 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2782:6
     |
2782 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2783:6
     |
2783 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2784:6
     |
2784 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2785:6
     |
2785 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2786:6
     |
2786 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2787:6
     |
2787 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2788:6
     |
2788 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2789:6
     |
2789 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2790:6
     |
2790 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2796:6
     |
2796 |     let mut active_size = neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `neuron_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2868:6
     |
2868 |     let neuron_size: u64 = netdata.neuron_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2869:6
     |
2869 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2870:6
     |
2870 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2871:6
     |
2871 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2875:6
     |
2875 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2879:6
     |
2879 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2882:6
     |
2882 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2883:6
     |
2883 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2884:6
     |
2884 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2885:6
     |
2885 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2889:6
     |
2889 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2890:6
     |
2890 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2896:6
     |
2896 |     let mut phi = two*std::f64::consts::PI*arrayfire::randu::<f64>(generate_dims);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2908:6
     |
2908 |     let mut total_obj2 = arrayfire::join_many(1, vec![&x,&y,&z]);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2925:7
     |
2925 |         let mut dist = arrayfire::sub(&select_pos,&total_obj2, true);
     |             ----^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2926:7
     |
2926 |         let mut magsq = arrayfire::pow(&dist,&two,false);
     |             ----^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `neuron_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2990:6
     |
2990 |     let neuron_size: u64 = netdata.neuron_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2991:6
     |
2991 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2992:6
     |
2992 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2993:6
     |
2993 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:2997:6
     |
2997 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3001:6
     |
3001 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3004:6
     |
3004 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3005:6
     |
3005 |     let center_const: f64 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3006:6
     |
3006 |     let spring_const: f64 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3007:6
     |
3007 |     let repel_const: f64 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3011:6
     |
3011 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3012:6
     |
3012 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `single_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3045:6
     |
3045 |     let single_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:3018:6
     |
3018 |     let mut phi = two*std::f64::consts::PI*arrayfire::randu::<f64>(generate_dims);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `neuron_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:24:6
   |
24 |     let neuron_size: u64 = netdata.neuron_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:25:6
   |
25 |     let input_size: u64 = netdata.input_size.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:26:6
   |
26 |     let output_size: u64 = netdata.output_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:27:6
   |
27 |     let proc_num: u64 = netdata.proc_num.clone();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:28:6
   |
28 |     let active_size: u64 = netdata.active_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `del_unused_neuron`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:33:6
   |
33 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
   |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `nratio`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:37:6
   |
37 |     let nratio: f64 = netdata.nratio.clone();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:38:6
   |
38 |     let neuron_std: f64 = netdata.neuron_std.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:39:6
   |
39 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: value assigned to `dist2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:83:10
   |
83 |     let mut dist2 = arrayfire::constant::<f64>(0.0,single_dims);
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `magsq2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:84:10
   |
84 |     let mut magsq2 = arrayfire::constant::<f64>(0.0,single_dims);
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `newvel` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:86:10
   |
86 |     let mut newvel = arrayfire::constant::<f64>(0.0,single_dims);
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `newvel2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:87:10
   |
87 |     let mut newvel2 = arrayfire::constant::<f64>(0.0,single_dims);
   |             ^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp1` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:93:10
   |
93 |     let mut cmp1 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:94:10
   |
94 |     let mut cmp2 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `and1` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:95:10
   |
95 |     let mut and1 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `and2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:96:10
   |
96 |     let mut and2 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp3` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:98:10
   |
98 |     let mut cmp3 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp4` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:99:10
   |
99 |     let mut cmp4 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `total_obj_norm` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:125:10
    |
125 |     let mut total_obj_norm = vec_norm(&total_obj);
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:128:6
    |
128 |     for step in 0u64..step_num
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_step`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:118:6
    |
118 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:119:6
    |
119 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:120:6
    |
120 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:121:6
    |
121 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:122:6
    |
122 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:124:6
    |
124 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:127:6
    |
127 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:130:6
    |
130 |     let time_step: f64 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:132:6
    |
132 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:133:6
    |
133 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:136:6
    |
136 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:137:6
    |
137 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:138:6
    |
138 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `singlevec`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:155:6
    |
155 |     let singlevec = arrayfire::constant::<f64>(1000000.0,single_dims);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_singlevec`

warning: value assigned to `mdist` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:188:10
    |
188 |     let mut mdist: f64 = 0.0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `j`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:214:6
    |
214 |     for j in 0u64..(new_object_num-1)
    |         ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: value assigned to `mdist` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:216:3
    |
216 |         mdist = 0.0;
    |         ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:166:6
    |
166 |     let mut total_num:i64 = (neuron_num + glia_num) as i64;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:298:6
    |
298 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:299:6
    |
299 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:300:6
    |
300 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:301:6
    |
301 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:302:6
    |
302 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:304:6
    |
304 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:309:6
    |
309 |     let time_step: f64 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:310:6
    |
310 |     let nratio: f64 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:311:6
    |
311 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:312:6
    |
312 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:315:6
    |
315 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:316:6
    |
316 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:317:6
    |
317 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `glia_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:333:6
    |
333 |     let glia_dims = glia_pos.dims();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_glia_dims`

warning: unused variable: `singlevec`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:336:6
    |
336 |     let singlevec = arrayfire::constant::<f64>(1000000.0,pos_dims);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_singlevec`

warning: value assigned to `i` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:408:10
    |
408 |     let mut i : i64 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `mdist` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:409:10
    |
409 |     let mut mdist: f64 = 100000.0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sel_pos` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:410:10
    |
410 |     let mut sel_pos = arrayfire::row(&total_neurons, 0 );
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:649:6
    |
649 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:650:6
    |
650 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:651:6
    |
651 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:652:6
    |
652 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:655:6
    |
655 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:658:6
    |
658 |     let time_step: f64 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:659:6
    |
659 |     let nratio: f64 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:660:6
    |
660 |     let neuron_std: f64 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:662:6
    |
662 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:663:6
    |
663 |     let con_rad: f64 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:664:6
    |
664 |     let init_prob: f64 = netdata.init_prob.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `add_neuron_rate`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:665:6
    |
665 |     let add_neuron_rate: f64 = netdata.add_neuron_rate.clone();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_neuron_rate`

warning: unused variable: `del_neuron_rate`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:666:6
    |
666 |     let del_neuron_rate: f64 = netdata.del_neuron_rate.clone();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:667:6
    |
667 |     let center_const: f64 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:668:6
    |
668 |     let spring_const: f64 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:669:6
    |
669 |     let repel_const: f64 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `gidx1` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:696:10
    |
696 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx2` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:697:10
    |
697 |     let mut gidx2 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx3` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:698:13
    |
698 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx4` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:699:13
    |
699 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:705:6
    |
705 |     let mut active_size = neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:706:6
    |
706 |     let mut hidden_size = active_size-output_size-input_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `con_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1054:10
     |
1054 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `del_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1055:10
     |
1055 |     let mut del_num = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hiddennum` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1115:10
     |
1115 |     let mut hiddennum = active_size - output_size - input_size;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1045:6
     |
1045 |     let mut input_size = (*arch_search).neural_network.netdata.input_size;
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1046:6
     |
1046 |     let mut output_size = (*arch_search).neural_network.netdata.output_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1282:10
     |
1282 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
     |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1284:6
     |
1284 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1285:6
     |
1285 |     let batch_size: u64 = (*arch_search).neural_network.netdata.batch_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1288:6
     |
1288 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1291:6
     |
1291 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1292:6
     |
1292 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1295:6
     |
1295 |     let neuron_rad: f64 = (*arch_search).neural_network.netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1296:6
     |
1296 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1297:6
     |
1297 |     let init_prob: f64 = (*arch_search).neural_network.netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `add_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1298:6
     |
1298 |     let add_neuron_rate: f64 = (*arch_search).neural_network.netdata.add_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_neuron_rate`

warning: unused variable: `del_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1299:6
     |
1299 |     let del_neuron_rate: f64 = (*arch_search).neural_network.netdata.del_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1300:6
     |
1300 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1301:6
     |
1301 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1302:6
     |
1302 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `newWValues` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1321:13
     |
1321 |     let mut newWValues = arrayfire::constant::<f64>(0.0,temp_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1326:10
     |
1326 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx2` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1327:10
     |
1327 |     let mut gidx2 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `gidx3`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1328:13
     |
1328 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx3`

warning: unused variable: `gidx4`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1329:13
     |
1329 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx4`

warning: unused variable: `hidden_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1336:10
     |
1336 |     let mut hidden_size = active_size-output_size-input_size;
     |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hidden_size`

warning: value assigned to `active_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1381:2
     |
1381 |     active_size = (*arch_search).neural_network.neuron_pos.dims()[0];
     |     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1282:6
     |
1282 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1328:9
     |
1328 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1329:9
     |
1329 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1336:6
     |
1336 |     let mut hidden_size = active_size-output_size-input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1355:6
     |
1355 |     let mut current_volume = sphere_rad*sphere_rad*sphere_rad;
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1483:6
     |
1483 |     let mut hidden_num2 =  (*arch_search).neural_network.neuron_pos.dims()[0]-output_size -input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1868:6
     |
1868 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1869:6
     |
1869 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1870:6
     |
1870 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1871:6
     |
1871 |     let batch_size: u64 = (*arch_search).neural_network.netdata.batch_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1874:6
     |
1874 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1877:6
     |
1877 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1878:6
     |
1878 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1879:6
     |
1879 |     let neuron_std: f64 = (*arch_search).neural_network.netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1882:6
     |
1882 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1883:6
     |
1883 |     let init_prob: f64 = (*arch_search).neural_network.netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `add_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1884:6
     |
1884 |     let add_neuron_rate: f64 = (*arch_search).neural_network.netdata.add_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_neuron_rate`

warning: unused variable: `del_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1885:6
     |
1885 |     let del_neuron_rate: f64 = (*arch_search).neural_network.netdata.del_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1886:6
     |
1886 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1887:6
     |
1887 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1888:6
     |
1888 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1916:10
     |
1916 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx2` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1917:10
     |
1917 |     let mut gidx2 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `gidx3`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1918:13
     |
1918 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx3`

warning: unused variable: `gidx4`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1919:13
     |
1919 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx4`

warning: unused variable: `hidden_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1926:10
     |
1926 |     let mut hidden_size = active_size-output_size-input_size;
     |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hidden_size`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1918:9
     |
1918 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1919:9
     |
1919 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1925:6
     |
1925 |     let mut active_size = (*arch_search).neural_network.neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:1926:6
     |
1926 |     let mut hidden_size = active_size-output_size-input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:2062:6
     |
2062 |     let mut hidden_num2 =  (*arch_search).neural_network.neuron_pos.dims()[0]-output_size -input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:117:6
    |
117 |     let mut rand2_vec = 2.0f64*arrayfire::randu::<f64>(rand2_dims) ;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:186:7
    |
186 |         for i in 1..(space_dims-1)
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:318:6
    |
318 |     let space_dims: u64 = neuronA_pos.dims()[1];
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `line_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:398:6
    |
398 |     let line_num: u64 = start_line.dims()[0];
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_line_num`

warning: unused variable: `circle_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:400:6
    |
400 |     let circle_num: u64 = circle_center.dims()[0];
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_circle_num`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:402:6
    |
402 |     let space_dims = start_line.dims()[1];
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: value assigned to `startseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:646:13
    |
646 |     let mut startseq: u64 = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:647:13
    |
647 |     let mut endseq: u64 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `startseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:743:13
    |
743 |     let mut startseq: u64 = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:744:13
    |
744 |     let mut endseq: u64 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `CMPRET` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:808:10
    |
808 |     let mut CMPRET = arrayfire::constant::<bool>(false,single_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `idx_intersect` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:809:10
    |
809 |     let mut idx_intersect = arrayfire::constant::<u32>(0,single_dims);
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `CMPRET` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:861:4
    |
861 |             CMPRET = arrayfire::constant::<bool>(false,single_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `idx_intersect` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:862:4
    |
862 |             idx_intersect = arrayfire::constant::<u32>(0,single_dims);
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:911:6
    |
911 |     let mut X2 =   arrayfire::col(end_lines1,0);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:912:6
    |
912 |     let mut Y2 =   arrayfire::col(end_lines1,1);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1218:13
     |
1218 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1219:13
     |
1219 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1346:6
     |
1346 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1347:6
     |
1347 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1348:6
     |
1348 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1350:6
     |
1350 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1355:6
     |
1355 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1356:6
     |
1356 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1357:6
     |
1357 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1361:6
     |
1361 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: value assigned to `gidxOld` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1388:10
     |
1388 |     let mut gidxOld = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1446:10
     |
1446 |     let mut hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1449:10
     |
1449 |     let mut tiled_input_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1451:10
     |
1451 |     let mut tiled_hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `circle_radius` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1460:10
     |
1460 |     let mut circle_radius = arrayfire::constant::<f64>(neuron_rad,arrayfire::Dim4::new(&[hidden_pos.dims()[0],1,1,1]));
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dir_line` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1466:13
     |
1466 |     let mut dir_line = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `raytrace_batch_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1470:10
     |
1470 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/start_line.dims()[0]) as u64);
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable `hidden_size_u32` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1475:10
     |
1475 |     let mut hidden_size_u32 = hidden_pos_total.dims()[0] as u32;
     |             ^^^^^^^^^^^^^^^
     |
     = note: consider using `_hidden_size_u32` instead

warning: value assigned to `hidden_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1476:10
     |
1476 |     let mut hidden_size = hidden_pos_total.dims()[0];
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1486:10
     |
1486 |     let mut gidx1 = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1495:10
     |
1495 |     let mut input_idx_size = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `select_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1499:10
     |
1499 |     let mut select_input_idx: u64 = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1502:10
     |
1502 |     let mut input_pos = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1503:10
     |
1503 |     let mut input_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1506:10
     |
1506 |     let mut glia_pos = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1507:10
     |
1507 |     let mut glia_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `pivot_pos`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1511:10
     |
1511 |     let mut pivot_pos = vec![-sphere_rad*0.7f64; space_dims as usize];
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pivot_pos`

warning: unused variable: `pivot_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1512:6
     |
1512 |     let pivot_rad = 4.0f64*con_rad;
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pivot_rad`

warning: unused variable: `nonoverlapping`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1513:10
     |
1513 |     let mut nonoverlapping = true;
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nonoverlapping`

warning: unused variable: `vv`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1515:6
     |
1515 |     for vv in 0..max_rounds
     |         ^^ help: if this is intentional, prefix it with an underscore: `_vv`

warning: value assigned to `hidden_size_u32` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1558:3
     |
1558 |         hidden_size_u32 = hidden_idx.dims()[0] as u32;
     |         ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1488:6
     |
1488 |     let mut gidx1_cpu:Vec<u64> = Vec::new();
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1511:6
     |
1511 |     let mut pivot_pos = vec![-sphere_rad*0.7f64; space_dims as usize];
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1513:6
     |
1513 |     let mut nonoverlapping = true;
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1518:7
     |
1518 |         let mut target_input = arrayfire::row(input_pos_total, select_input_idx as i64);
     |             ----^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1857:6
     |
1857 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1860:6
     |
1860 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1862:6
     |
1862 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1867:6
     |
1867 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1868:6
     |
1868 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1870:6
     |
1870 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1873:6
     |
1873 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `neuron_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1884:6
     |
1884 |     let neuron_num = neuron_dims[0];
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_num`

warning: variable `cur_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1924:10
     |
1924 |     let mut cur_num = idxsel.dims()[0];
     |             ^^^^^^^
     |
     = note: consider using `_cur_num` instead

warning: variable `line_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:1951:10
     |
1951 |     let mut line_num = start_line.dims()[0] as u32;
     |             ^^^^^^^^
     |
     = note: consider using `_line_num` instead

warning: value assigned to `newWRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2024:10
     |
2024 |     let mut newWRowIdxCOO = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `newWColIdx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2026:10
     |
2026 |     let mut newWColIdx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `start_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2033:10
     |
2033 |     let mut start_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines1`

warning: unused variable: `end_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2034:10
     |
2034 |     let mut end_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines1`

warning: unused variable: `start_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2036:10
     |
2036 |     let mut start_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines2`

warning: unused variable: `end_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2037:10
     |
2037 |     let mut end_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines2`

warning: unused variable: `i`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2040:6
     |
2040 |     for i in 1..proc_num
     |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `cur_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2046:3
     |
2046 |         cur_num = idxsel.dims()[0];
     |         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `line_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2073:3
     |
2073 |         line_num = start_line.dims()[0] as u32;
     |         ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2033:6
     |
2033 |     let mut start_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2034:6
     |
2034 |     let mut end_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2036:6
     |
2036 |     let mut start_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2037:6
     |
2037 |     let mut end_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2197:6
     |
2197 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2199:6
     |
2199 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2200:6
     |
2200 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2202:6
     |
2202 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2207:6
     |
2207 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2208:6
     |
2208 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2209:6
     |
2209 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2210:6
     |
2210 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2213:6
     |
2213 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `neuron_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2224:6
     |
2224 |     let neuron_num = neuron_dims[0];
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_num`

warning: variable `cur_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2264:10
     |
2264 |     let mut cur_num = idxsel.dims()[0];
     |             ^^^^^^^
     |
     = note: consider using `_cur_num` instead

warning: variable `line_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2291:10
     |
2291 |     let mut line_num = start_line.dims()[0] as u32;
     |             ^^^^^^^^
     |
     = note: consider using `_line_num` instead

warning: value assigned to `newWRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2362:10
     |
2362 |     let mut newWRowIdxCOO = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `newWColIdx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2364:10
     |
2364 |     let mut newWColIdx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `start_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2371:10
     |
2371 |     let mut start_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines1`

warning: unused variable: `end_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2372:10
     |
2372 |     let mut end_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines1`

warning: unused variable: `start_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2374:10
     |
2374 |     let mut start_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines2`

warning: unused variable: `end_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2375:10
     |
2375 |     let mut end_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines2`

warning: value assigned to `cur_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2384:3
     |
2384 |         cur_num = idxsel.dims()[0];
     |         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `line_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2411:3
     |
2411 |         line_num = start_line.dims()[0] as u32;
     |         ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2371:6
     |
2371 |     let mut start_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2372:6
     |
2372 |     let mut end_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2374:6
     |
2374 |     let mut start_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2375:6
     |
2375 |     let mut end_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2528:6
     |
2528 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2529:6
     |
2529 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2530:6
     |
2530 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2531:6
     |
2531 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2533:6
     |
2533 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2536:6
     |
2536 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2537:6
     |
2537 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2539:6
     |
2539 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2540:6
     |
2540 |     let neuron_rad: f64 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2541:6
     |
2541 |     let con_rad: f64 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2542:6
     |
2542 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: value assigned to `line_num3` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2621:10
     |
2621 |     let mut line_num3 = start_lines1.dims()[0] as u32;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `div_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2643:10
     |
2643 |     let mut div_idx = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ones` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2645:10
     |
2645 |     let mut ones = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `top_keys` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2647:10
     |
2647 |     let mut top_keys = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `table` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2650:10
     |
2650 |     let mut table = arrayfire::constant::<bool>(false,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inarr` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2652:10
     |
2652 |     let mut inarr = arrayfire::constant::<bool>(false,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `table_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2654:10
     |
2654 |     let mut table_idx = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2822:6
     |
2822 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2824:6
     |
2824 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2825:6
     |
2825 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2827:6
     |
2827 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2832:6
     |
2832 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2833:6
     |
2833 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2834:6
     |
2834 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2835:6
     |
2835 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2838:6
     |
2838 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `neuron_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2849:6
     |
2849 |     let neuron_num = neuron_dims[0];
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_num`

warning: variable `cur_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2889:10
     |
2889 |     let mut cur_num = idxsel.dims()[0];
     |             ^^^^^^^
     |
     = note: consider using `_cur_num` instead

warning: variable `line_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2945:10
     |
2945 |     let mut line_num = start_line.dims()[0] as u32;
     |             ^^^^^^^^
     |
     = note: consider using `_line_num` instead

warning: value assigned to `newWRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3016:10
     |
3016 |     let mut newWRowIdxCOO = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `newWColIdx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3018:10
     |
3018 |     let mut newWColIdx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `start_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3025:10
     |
3025 |     let mut start_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines1`

warning: unused variable: `end_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3026:10
     |
3026 |     let mut end_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines1`

warning: unused variable: `start_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3028:10
     |
3028 |     let mut start_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines2`

warning: unused variable: `end_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3029:10
     |
3029 |     let mut end_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines2`

warning: value assigned to `cur_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3038:3
     |
3038 |         cur_num = idxsel.dims()[0];
     |         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `line_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3092:3
     |
3092 |         line_num = start_line.dims()[0] as u32;
     |         ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2923:6
     |
2923 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/(2*neuron_pos.dims()[0])) as u64);
     |         ----^^^^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:2947:6
     |
2947 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/(start_line.dims()[0])) as u64);
     |         ----^^^^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3025:6
     |
3025 |     let mut start_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3026:6
     |
3026 |     let mut end_lines1 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3028:6
     |
3028 |     let mut start_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3029:6
     |
3029 |     let mut end_lines2 = arrayfire::constant::<f64>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3256:6
     |
3256 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3257:6
     |
3257 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3258:6
     |
3258 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3259:6
     |
3259 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3260:6
     |
3260 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3265:6
     |
3265 |     let time_step: f64 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3266:6
     |
3266 |     let nratio: f64 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3267:6
     |
3267 |     let neuron_std: f64 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3268:6
     |
3268 |     let sphere_rad: f64 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3271:6
     |
3271 |     let init_prob: f64 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: value assigned to `gidxOld` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3298:10
     |
3298 |     let mut gidxOld = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3356:10
     |
3356 |     let mut hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3359:10
     |
3359 |     let mut tiled_input_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3361:10
     |
3361 |     let mut tiled_hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `circle_radius` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3370:10
     |
3370 |     let mut circle_radius = arrayfire::constant::<f64>(neuron_rad,arrayfire::Dim4::new(&[hidden_pos.dims()[0],1,1,1]));
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dir_line` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3376:13
     |
3376 |     let mut dir_line = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `raytrace_batch_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3380:10
     |
3380 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/start_line.dims()[0]) as u64);
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable `hidden_size_u32` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3385:10
     |
3385 |     let mut hidden_size_u32 = hidden_pos_total.dims()[0] as u32;
     |             ^^^^^^^^^^^^^^^
     |
     = note: consider using `_hidden_size_u32` instead

warning: value assigned to `hidden_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3386:10
     |
3386 |     let mut hidden_size = hidden_pos_total.dims()[0];
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3396:10
     |
3396 |     let mut gidx1 = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3405:10
     |
3405 |     let mut input_idx_size = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `select_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3409:10
     |
3409 |     let mut select_input_idx: u64 = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3412:10
     |
3412 |     let mut input_pos = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3413:10
     |
3413 |     let mut input_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3416:10
     |
3416 |     let mut glia_pos = arrayfire::constant::<f64>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3417:10
     |
3417 |     let mut glia_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `vv`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3422:6
     |
3422 |     for vv in 0..max_rounds
     |         ^^ help: if this is intentional, prefix it with an underscore: `_vv`

warning: unused variable: `target_input`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3425:7
     |
3425 |         let target_input = arrayfire::row(input_pos_total, select_input_idx as i64);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_input`

warning: value assigned to `hidden_size_u32` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3464:3
     |
3464 |         hidden_size_u32 = hidden_idx.dims()[0] as u32;
     |         ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:3398:6
     |
3398 |     let mut gidx1_cpu:Vec<u64> = Vec::new();
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f32.rs:27:6
   |
27 |     let mut cmp2 = arrayfire::lt(pos , &neg_cube_size, false);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f32.rs:46:6
   |
46 |     let mut cmp2 = arrayfire::lt(&neg_cube_size,  pos, false);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `pos_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/distance_f32.rs:166:6
    |
166 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:282:7
    |
282 |         let neuron_size: u64 = netdata.neuron_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:283:7
    |
283 |         let input_size: u64 = netdata.input_size.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:284:7
    |
284 |         let output_size: u64 = netdata.output_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:285:7
    |
285 |         let proc_num: u64 = netdata.proc_num.clone();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:289:7
    |
289 |         let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:293:7
    |
293 |         let neuron_std: f32 = netdata.neuron_std.clone();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:296:7
    |
296 |         let con_rad: f32 = netdata.con_rad.clone();
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:297:7
    |
297 |         let center_const: f32 = netdata.center_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:298:7
    |
298 |         let spring_const: f32 = netdata.spring_const.clone();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:299:7
    |
299 |         let repel_const: f32 = netdata.repel_const.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:315:7
    |
315 |         for i in 0u64..active_size
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:502:6
    |
502 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:503:6
    |
503 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:504:6
    |
504 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:505:6
    |
505 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:509:6
    |
509 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:513:6
    |
513 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:516:6
    |
516 |     let con_rad: f32 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:517:6
    |
517 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:518:6
    |
518 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:519:6
    |
519 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:523:6
    |
523 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:524:6
    |
524 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:557:6
    |
557 |     let single_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:530:6
    |
530 |     let mut phi = two*std::f32::consts::PI*arrayfire::randu::<f32>(generate_dims);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:657:6
    |
657 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:658:6
    |
658 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:659:6
    |
659 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:660:6
    |
660 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:664:6
    |
664 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:668:6
    |
668 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:671:6
    |
671 |     let con_rad: f32 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:672:6
    |
672 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:673:6
    |
673 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:674:6
    |
674 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:678:6
    |
678 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:679:6
    |
679 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `single_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:712:6
    |
712 |     let single_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:685:6
    |
685 |     let mut phi = two*std::f32::consts::PI*arrayfire::randu::<f32>(generate_dims);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:874:6
    |
874 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:876:6
    |
876 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:877:6
    |
877 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:878:6
    |
878 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:879:6
    |
879 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:883:6
    |
883 |     let time_step: f32 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:884:6
    |
884 |     let nratio: f32 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:885:6
    |
885 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:886:6
    |
886 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:887:6
    |
887 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:888:6
    |
888 |     let con_rad: f32 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:889:6
    |
889 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:890:6
    |
890 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:891:6
    |
891 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:927:6
    |
927 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:928:6
    |
928 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:929:6
    |
929 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:930:6
    |
930 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1008:6
     |
1008 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1009:6
     |
1009 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1010:6
     |
1010 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1011:6
     |
1011 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1016:6
     |
1016 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1017:6
     |
1017 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1019:6
     |
1019 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1020:6
     |
1020 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1021:6
     |
1021 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1022:6
     |
1022 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1023:6
     |
1023 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1024:6
     |
1024 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1025:6
     |
1025 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1282:6
     |
1282 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1283:6
     |
1283 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1284:6
     |
1284 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1285:6
     |
1285 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1290:6
     |
1290 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1291:6
     |
1291 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1293:6
     |
1293 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1294:6
     |
1294 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1295:6
     |
1295 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1296:6
     |
1296 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1297:6
     |
1297 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1298:6
     |
1298 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1299:6
     |
1299 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1323:13
     |
1323 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1324:13
     |
1324 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1312:6
     |
1312 |     let mut input_neurons = arrayfire::rows(neuron_pos, 0, (input_size-1)  as i64);
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1314:6
     |
1314 |     let mut hidden_neurons = arrayfire::rows(neuron_pos, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1453:6
     |
1453 |     let mut hidden_idx = arrayfire::rows(neuron_idx, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1483:6
     |
1483 |     let mut tile_dims = arrayfire::Dim4::new(&[input_size,1,1,1]);
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1571:6
     |
1571 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1572:6
     |
1572 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1573:6
     |
1573 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1574:6
     |
1574 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1579:6
     |
1579 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1580:6
     |
1580 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1582:6
     |
1582 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1583:6
     |
1583 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1584:6
     |
1584 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1585:6
     |
1585 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1586:6
     |
1586 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1587:6
     |
1587 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1588:6
     |
1588 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1612:13
     |
1612 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1613:13
     |
1613 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1601:6
     |
1601 |     let mut hidden_neurons = arrayfire::rows(neuron_pos, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1604:6
     |
1604 |     let mut output_neurons = arrayfire::rows(neuron_pos, (neuron_num-output_size) as i64, (neuron_num-1)  as i64);
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1742:6
     |
1742 |     let mut hidden_idx = arrayfire::rows(neuron_idx, input_size as i64, (neuron_num-output_size-1)  as i64);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1767:6
     |
1767 |     let mut output_idx = arrayfire::rows(neuron_idx, (neuron_num-output_size) as i64, (neuron_num-1)  as i64);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1780:6
     |
1780 |     let mut tile_dims = arrayfire::Dim4::new(&[output_size,1,1,1]);
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1853:6
     |
1853 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1854:6
     |
1854 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1921:6
     |
1921 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1922:6
     |
1922 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1923:6
     |
1923 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1924:6
     |
1924 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1925:6
     |
1925 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1926:6
     |
1926 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1931:6
     |
1931 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1932:6
     |
1932 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1934:6
     |
1934 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1938:6
     |
1938 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1939:6
     |
1939 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:1940:6
     |
1940 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `neuron_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2120:6
     |
2120 |     let neuron_size: u64 = netdata.neuron_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2121:6
     |
2121 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2122:6
     |
2122 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2123:6
     |
2123 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2124:6
     |
2124 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2125:6
     |
2125 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2126:6
     |
2126 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2131:6
     |
2131 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2132:6
     |
2132 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2133:6
     |
2133 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2134:6
     |
2134 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2138:6
     |
2138 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2139:6
     |
2139 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2140:6
     |
2140 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2295:6
     |
2295 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2296:6
     |
2296 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2297:6
     |
2297 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2298:6
     |
2298 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2299:6
     |
2299 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2300:6
     |
2300 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2305:6
     |
2305 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2306:6
     |
2306 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2308:6
     |
2308 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2309:6
     |
2309 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2310:6
     |
2310 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2311:6
     |
2311 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2312:6
     |
2312 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2313:6
     |
2313 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2314:6
     |
2314 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2338:13
     |
2338 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2339:13
     |
2339 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2565:6
     |
2565 |     let active_size: u64 = (*netdata).active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2566:6
     |
2566 |     let space_dims: u64 = (*netdata).space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2567:6
     |
2567 |     let step_num: u64 = (*netdata).step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2571:6
     |
2571 |     let time_step: f32 = (*netdata).time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2572:6
     |
2572 |     let nratio: f32 = (*netdata).nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2573:6
     |
2573 |     let neuron_std: f32 = (*netdata).neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2574:6
     |
2574 |     let sphere_rad: f32 = (*netdata).sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2575:6
     |
2575 |     let neuron_rad: f32 = (*netdata).neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2576:6
     |
2576 |     let con_rad: f32 = (*netdata).con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2577:6
     |
2577 |     let init_prob: f32 = (*netdata).init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2578:6
     |
2578 |     let center_const: f32 = (*netdata).center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2579:6
     |
2579 |     let spring_const: f32 = (*netdata).spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2580:6
     |
2580 |     let repel_const: f32 = (*netdata).repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2685:6
     |
2685 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2686:6
     |
2686 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2687:6
     |
2687 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2688:6
     |
2688 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2693:6
     |
2693 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2694:6
     |
2694 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2695:6
     |
2695 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2696:6
     |
2696 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2697:6
     |
2697 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2698:6
     |
2698 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2699:6
     |
2699 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2700:6
     |
2700 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2701:6
     |
2701 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2702:6
     |
2702 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2708:6
     |
2708 |     let mut active_size = neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2773:6
     |
2773 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2774:6
     |
2774 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2775:6
     |
2775 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2776:6
     |
2776 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2781:6
     |
2781 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2782:6
     |
2782 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2783:6
     |
2783 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2784:6
     |
2784 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2785:6
     |
2785 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2786:6
     |
2786 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2787:6
     |
2787 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2788:6
     |
2788 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2789:6
     |
2789 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2790:6
     |
2790 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2796:6
     |
2796 |     let mut active_size = neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `neuron_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2868:6
     |
2868 |     let neuron_size: u64 = netdata.neuron_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2869:6
     |
2869 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2870:6
     |
2870 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2871:6
     |
2871 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2875:6
     |
2875 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2879:6
     |
2879 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2882:6
     |
2882 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2883:6
     |
2883 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2884:6
     |
2884 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2885:6
     |
2885 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2889:6
     |
2889 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2890:6
     |
2890 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2896:6
     |
2896 |     let mut phi = two*std::f32::consts::PI*arrayfire::randu::<f32>(generate_dims);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2908:6
     |
2908 |     let mut total_obj2 = arrayfire::join_many(1, vec![&x,&y,&z]);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2925:7
     |
2925 |         let mut dist = arrayfire::sub(&select_pos,&total_obj2, true);
     |             ----^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2926:7
     |
2926 |         let mut magsq = arrayfire::pow(&dist,&two,false);
     |             ----^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `neuron_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2990:6
     |
2990 |     let neuron_size: u64 = netdata.neuron_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2991:6
     |
2991 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2992:6
     |
2992 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2993:6
     |
2993 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:2997:6
     |
2997 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3001:6
     |
3001 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3004:6
     |
3004 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3005:6
     |
3005 |     let center_const: f32 = netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3006:6
     |
3006 |     let spring_const: f32 = netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3007:6
     |
3007 |     let repel_const: f32 = netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `single_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3011:6
     |
3011 |     let single_dims = arrayfire::Dim4::new(&[1,1,1,1]);
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: unused variable: `pos_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3012:6
     |
3012 |     let pos_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pos_dims`

warning: unused variable: `single_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3045:6
     |
3045 |     let single_dims = arrayfire::Dim4::new(&[1,space_dims,1,1]);
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_single_dims`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:3018:6
     |
3018 |     let mut phi = two*std::f32::consts::PI*arrayfire::randu::<f32>(generate_dims);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `neuron_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:24:6
   |
24 |     let neuron_size: u64 = netdata.neuron_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:25:6
   |
25 |     let input_size: u64 = netdata.input_size.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:26:6
   |
26 |     let output_size: u64 = netdata.output_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:27:6
   |
27 |     let proc_num: u64 = netdata.proc_num.clone();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:28:6
   |
28 |     let active_size: u64 = netdata.active_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `del_unused_neuron`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:33:6
   |
33 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
   |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `nratio`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:37:6
   |
37 |     let nratio: f32 = netdata.nratio.clone();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:38:6
   |
38 |     let neuron_std: f32 = netdata.neuron_std.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:39:6
   |
39 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: value assigned to `dist2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:83:10
   |
83 |     let mut dist2 = arrayfire::constant::<f32>(0.0,single_dims);
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `magsq2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:84:10
   |
84 |     let mut magsq2 = arrayfire::constant::<f32>(0.0,single_dims);
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `newvel` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:86:10
   |
86 |     let mut newvel = arrayfire::constant::<f32>(0.0,single_dims);
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `newvel2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:87:10
   |
87 |     let mut newvel2 = arrayfire::constant::<f32>(0.0,single_dims);
   |             ^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp1` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:93:10
   |
93 |     let mut cmp1 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:94:10
   |
94 |     let mut cmp2 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `and1` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:95:10
   |
95 |     let mut and1 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `and2` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:96:10
   |
96 |     let mut and2 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp3` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:98:10
   |
98 |     let mut cmp3 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `cmp4` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:99:10
   |
99 |     let mut cmp4 = arrayfire::constant::<bool>(false,single_dims);
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `total_obj_norm` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:125:10
    |
125 |     let mut total_obj_norm = vec_norm(&total_obj);
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:128:6
    |
128 |     for step in 0u64..step_num
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_step`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:118:6
    |
118 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:119:6
    |
119 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:120:6
    |
120 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:121:6
    |
121 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:122:6
    |
122 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:124:6
    |
124 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:127:6
    |
127 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:130:6
    |
130 |     let time_step: f32 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:132:6
    |
132 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:133:6
    |
133 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:136:6
    |
136 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:137:6
    |
137 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:138:6
    |
138 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `singlevec`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:155:6
    |
155 |     let singlevec = arrayfire::constant::<f32>(1000000.0,single_dims);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_singlevec`

warning: value assigned to `mdist` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:188:10
    |
188 |     let mut mdist: f32 = 0.0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `j`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:214:6
    |
214 |     for j in 0u64..(new_object_num-1)
    |         ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: value assigned to `mdist` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:216:3
    |
216 |         mdist = 0.0;
    |         ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:166:6
    |
166 |     let mut total_num:i64 = (neuron_num + glia_num) as i64;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:298:6
    |
298 |     let neuron_size: u64 = netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:299:6
    |
299 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:300:6
    |
300 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:301:6
    |
301 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:302:6
    |
302 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:304:6
    |
304 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:309:6
    |
309 |     let time_step: f32 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:310:6
    |
310 |     let nratio: f32 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:311:6
    |
311 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:312:6
    |
312 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:315:6
    |
315 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:316:6
    |
316 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:317:6
    |
317 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `glia_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:333:6
    |
333 |     let glia_dims = glia_pos.dims();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_glia_dims`

warning: unused variable: `singlevec`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:336:6
    |
336 |     let singlevec = arrayfire::constant::<f32>(1000000.0,pos_dims);
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_singlevec`

warning: value assigned to `i` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:408:10
    |
408 |     let mut i : i64 = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `mdist` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:409:10
    |
409 |     let mut mdist: f32 = 100000.0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sel_pos` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:410:10
    |
410 |     let mut sel_pos = arrayfire::row(&total_neurons, 0 );
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:649:6
    |
649 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:650:6
    |
650 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:651:6
    |
651 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:652:6
    |
652 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:655:6
    |
655 |     let del_unused_neuron: bool = netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:658:6
    |
658 |     let time_step: f32 = netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:659:6
    |
659 |     let nratio: f32 = netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:660:6
    |
660 |     let neuron_std: f32 = netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:662:6
    |
662 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:663:6
    |
663 |     let con_rad: f32 = netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:664:6
    |
664 |     let init_prob: f32 = netdata.init_prob.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `add_neuron_rate`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:665:6
    |
665 |     let add_neuron_rate: f32 = netdata.add_neuron_rate.clone();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_neuron_rate`

warning: unused variable: `del_neuron_rate`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:666:6
    |
666 |     let del_neuron_rate: f32 = netdata.del_neuron_rate.clone();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:667:6
    |
667 |     let center_const: f32 = netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:668:6
    |
668 |     let spring_const: f32 = netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:669:6
    |
669 |     let repel_const: f32 = netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `gidx1` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:696:10
    |
696 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx2` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:697:10
    |
697 |     let mut gidx2 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx3` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:698:13
    |
698 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx4` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:699:13
    |
699 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:705:6
    |
705 |     let mut active_size = neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:706:6
    |
706 |     let mut hidden_size = active_size-output_size-input_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `con_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1054:10
     |
1054 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `del_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1055:10
     |
1055 |     let mut del_num = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hiddennum` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1115:10
     |
1115 |     let mut hiddennum = active_size - output_size - input_size;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1045:6
     |
1045 |     let mut input_size = (*arch_search).neural_network.netdata.input_size;
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1046:6
     |
1046 |     let mut output_size = (*arch_search).neural_network.netdata.output_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1282:10
     |
1282 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
     |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1284:6
     |
1284 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1285:6
     |
1285 |     let batch_size: u64 = (*arch_search).neural_network.netdata.batch_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1288:6
     |
1288 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1291:6
     |
1291 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1292:6
     |
1292 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1295:6
     |
1295 |     let neuron_rad: f32 = (*arch_search).neural_network.netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1296:6
     |
1296 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1297:6
     |
1297 |     let init_prob: f32 = (*arch_search).neural_network.netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `add_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1298:6
     |
1298 |     let add_neuron_rate: f32 = (*arch_search).neural_network.netdata.add_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_neuron_rate`

warning: unused variable: `del_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1299:6
     |
1299 |     let del_neuron_rate: f32 = (*arch_search).neural_network.netdata.del_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1300:6
     |
1300 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1301:6
     |
1301 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1302:6
     |
1302 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `newWValues` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1321:13
     |
1321 |     let mut newWValues = arrayfire::constant::<f32>(0.0,temp_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1326:10
     |
1326 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx2` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1327:10
     |
1327 |     let mut gidx2 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `gidx3`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1328:13
     |
1328 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx3`

warning: unused variable: `gidx4`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1329:13
     |
1329 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx4`

warning: unused variable: `hidden_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1336:10
     |
1336 |     let mut hidden_size = active_size-output_size-input_size;
     |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hidden_size`

warning: value assigned to `active_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1381:2
     |
1381 |     active_size = (*arch_search).neural_network.neuron_pos.dims()[0];
     |     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1282:6
     |
1282 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1328:9
     |
1328 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1329:9
     |
1329 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1336:6
     |
1336 |     let mut hidden_size = active_size-output_size-input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1355:6
     |
1355 |     let mut current_volume = sphere_rad*sphere_rad*sphere_rad;
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1483:6
     |
1483 |     let mut hidden_num2 =  (*arch_search).neural_network.neuron_pos.dims()[0]-output_size -input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1868:6
     |
1868 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1869:6
     |
1869 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1870:6
     |
1870 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1871:6
     |
1871 |     let batch_size: u64 = (*arch_search).neural_network.netdata.batch_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `del_unused_neuron`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1874:6
     |
1874 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
     |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1877:6
     |
1877 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1878:6
     |
1878 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1879:6
     |
1879 |     let neuron_std: f32 = (*arch_search).neural_network.netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1882:6
     |
1882 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1883:6
     |
1883 |     let init_prob: f32 = (*arch_search).neural_network.netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `add_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1884:6
     |
1884 |     let add_neuron_rate: f32 = (*arch_search).neural_network.netdata.add_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_neuron_rate`

warning: unused variable: `del_neuron_rate`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1885:6
     |
1885 |     let del_neuron_rate: f32 = (*arch_search).neural_network.netdata.del_neuron_rate.clone();
     |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_neuron_rate`

warning: unused variable: `center_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1886:6
     |
1886 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1887:6
     |
1887 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1888:6
     |
1888 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1916:10
     |
1916 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx2` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1917:10
     |
1917 |     let mut gidx2 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `gidx3`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1918:13
     |
1918 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx3`

warning: unused variable: `gidx4`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1919:13
     |
1919 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_gidx4`

warning: unused variable: `hidden_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1926:10
     |
1926 |     let mut hidden_size = active_size-output_size-input_size;
     |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hidden_size`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1918:9
     |
1918 |     let mut gidx3 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1919:9
     |
1919 |     let mut gidx4 = arrayfire::constant::<u64>(0,temp_dims);
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1925:6
     |
1925 |     let mut active_size = (*arch_search).neural_network.neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:1926:6
     |
1926 |     let mut hidden_size = active_size-output_size-input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:2062:6
     |
2062 |     let mut hidden_num2 =  (*arch_search).neural_network.neuron_pos.dims()[0]-output_size -input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:117:6
    |
117 |     let mut rand2_vec = 2.0f32*arrayfire::randu::<f32>(rand2_dims) ;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:186:7
    |
186 |         for i in 1..(space_dims-1)
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:318:6
    |
318 |     let space_dims: u64 = neuronA_pos.dims()[1];
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `line_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:398:6
    |
398 |     let line_num: u64 = start_line.dims()[0];
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_line_num`

warning: unused variable: `circle_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:400:6
    |
400 |     let circle_num: u64 = circle_center.dims()[0];
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_circle_num`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:402:6
    |
402 |     let space_dims = start_line.dims()[1];
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: value assigned to `startseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:646:13
    |
646 |     let mut startseq: u64 = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:647:13
    |
647 |     let mut endseq: u64 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `startseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:743:13
    |
743 |     let mut startseq: u64 = 0;
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:744:13
    |
744 |     let mut endseq: u64 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `CMPRET` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:808:10
    |
808 |     let mut CMPRET = arrayfire::constant::<bool>(false,single_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `idx_intersect` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:809:10
    |
809 |     let mut idx_intersect = arrayfire::constant::<u32>(0,single_dims);
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `CMPRET` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:861:4
    |
861 |             CMPRET = arrayfire::constant::<bool>(false,single_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `idx_intersect` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:862:4
    |
862 |             idx_intersect = arrayfire::constant::<u32>(0,single_dims);
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:911:6
    |
911 |     let mut X2 =   arrayfire::col(end_lines1,0);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:912:6
    |
912 |     let mut Y2 =   arrayfire::col(end_lines1,1);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `startseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1218:13
     |
1218 |     let mut startseq: u64 = 0;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1219:13
     |
1219 |     let mut endseq: u64 = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1346:6
     |
1346 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1347:6
     |
1347 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1348:6
     |
1348 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1350:6
     |
1350 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1355:6
     |
1355 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1356:6
     |
1356 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1357:6
     |
1357 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1361:6
     |
1361 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: value assigned to `gidxOld` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1388:10
     |
1388 |     let mut gidxOld = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1446:10
     |
1446 |     let mut hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1449:10
     |
1449 |     let mut tiled_input_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1451:10
     |
1451 |     let mut tiled_hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `circle_radius` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1460:10
     |
1460 |     let mut circle_radius = arrayfire::constant::<f32>(neuron_rad,arrayfire::Dim4::new(&[hidden_pos.dims()[0],1,1,1]));
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dir_line` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1466:13
     |
1466 |     let mut dir_line = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `raytrace_batch_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1470:10
     |
1470 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/start_line.dims()[0]) as u64);
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable `hidden_size_u32` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1475:10
     |
1475 |     let mut hidden_size_u32 = hidden_pos_total.dims()[0] as u32;
     |             ^^^^^^^^^^^^^^^
     |
     = note: consider using `_hidden_size_u32` instead

warning: value assigned to `hidden_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1476:10
     |
1476 |     let mut hidden_size = hidden_pos_total.dims()[0];
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1486:10
     |
1486 |     let mut gidx1 = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1495:10
     |
1495 |     let mut input_idx_size = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `select_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1502:10
     |
1502 |     let mut select_input_idx: u64 = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1505:10
     |
1505 |     let mut input_pos = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1506:10
     |
1506 |     let mut input_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1509:10
     |
1509 |     let mut glia_pos = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1510:10
     |
1510 |     let mut glia_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `pivot_pos`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1514:10
     |
1514 |     let mut pivot_pos = vec![-sphere_rad*0.7f32; space_dims as usize];
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pivot_pos`

warning: unused variable: `pivot_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1515:6
     |
1515 |     let pivot_rad = 4.0f32*con_rad;
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pivot_rad`

warning: unused variable: `nonoverlapping`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1516:10
     |
1516 |     let mut nonoverlapping = true;
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nonoverlapping`

warning: unused variable: `vv`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1518:6
     |
1518 |     for vv in 0..max_rounds
     |         ^^ help: if this is intentional, prefix it with an underscore: `_vv`

warning: value assigned to `hidden_size_u32` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1561:3
     |
1561 |         hidden_size_u32 = hidden_idx.dims()[0] as u32;
     |         ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1488:6
     |
1488 |     let mut gidx1_cpu:Vec<u64> = Vec::new();
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1514:6
     |
1514 |     let mut pivot_pos = vec![-sphere_rad*0.7f32; space_dims as usize];
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1516:6
     |
1516 |     let mut nonoverlapping = true;
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1521:7
     |
1521 |         let mut target_input = arrayfire::row(input_pos_total, select_input_idx as i64);
     |             ----^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1860:6
     |
1860 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1863:6
     |
1863 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1865:6
     |
1865 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1870:6
     |
1870 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1871:6
     |
1871 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1873:6
     |
1873 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1876:6
     |
1876 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `neuron_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1887:6
     |
1887 |     let neuron_num = neuron_dims[0];
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_num`

warning: variable `cur_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1927:10
     |
1927 |     let mut cur_num = idxsel.dims()[0];
     |             ^^^^^^^
     |
     = note: consider using `_cur_num` instead

warning: variable `line_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:1954:10
     |
1954 |     let mut line_num = start_line.dims()[0] as u32;
     |             ^^^^^^^^
     |
     = note: consider using `_line_num` instead

warning: value assigned to `newWRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2027:10
     |
2027 |     let mut newWRowIdxCOO = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `newWColIdx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2029:10
     |
2029 |     let mut newWColIdx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `start_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2036:10
     |
2036 |     let mut start_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines1`

warning: unused variable: `end_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2037:10
     |
2037 |     let mut end_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines1`

warning: unused variable: `start_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2039:10
     |
2039 |     let mut start_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines2`

warning: unused variable: `end_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2040:10
     |
2040 |     let mut end_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines2`

warning: unused variable: `i`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2043:6
     |
2043 |     for i in 1..proc_num
     |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `cur_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2049:3
     |
2049 |         cur_num = idxsel.dims()[0];
     |         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `line_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2076:3
     |
2076 |         line_num = start_line.dims()[0] as u32;
     |         ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2036:6
     |
2036 |     let mut start_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2037:6
     |
2037 |     let mut end_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2039:6
     |
2039 |     let mut start_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2040:6
     |
2040 |     let mut end_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2200:6
     |
2200 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2202:6
     |
2202 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2203:6
     |
2203 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2205:6
     |
2205 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2210:6
     |
2210 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2211:6
     |
2211 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2212:6
     |
2212 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2213:6
     |
2213 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2216:6
     |
2216 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `neuron_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2227:6
     |
2227 |     let neuron_num = neuron_dims[0];
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_num`

warning: variable `cur_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2267:10
     |
2267 |     let mut cur_num = idxsel.dims()[0];
     |             ^^^^^^^
     |
     = note: consider using `_cur_num` instead

warning: variable `line_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2294:10
     |
2294 |     let mut line_num = start_line.dims()[0] as u32;
     |             ^^^^^^^^
     |
     = note: consider using `_line_num` instead

warning: value assigned to `newWRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2365:10
     |
2365 |     let mut newWRowIdxCOO = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `newWColIdx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2367:10
     |
2367 |     let mut newWColIdx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `start_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2374:10
     |
2374 |     let mut start_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines1`

warning: unused variable: `end_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2375:10
     |
2375 |     let mut end_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines1`

warning: unused variable: `start_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2377:10
     |
2377 |     let mut start_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines2`

warning: unused variable: `end_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2378:10
     |
2378 |     let mut end_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines2`

warning: value assigned to `cur_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2387:3
     |
2387 |         cur_num = idxsel.dims()[0];
     |         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `line_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2414:3
     |
2414 |         line_num = start_line.dims()[0] as u32;
     |         ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2374:6
     |
2374 |     let mut start_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2375:6
     |
2375 |     let mut end_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2377:6
     |
2377 |     let mut start_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2378:6
     |
2378 |     let mut end_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2531:6
     |
2531 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2532:6
     |
2532 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2533:6
     |
2533 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2534:6
     |
2534 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2536:6
     |
2536 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2539:6
     |
2539 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2540:6
     |
2540 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2542:6
     |
2542 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2543:6
     |
2543 |     let neuron_rad: f32 = netdata.neuron_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2544:6
     |
2544 |     let con_rad: f32 = netdata.con_rad.clone();
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2545:6
     |
2545 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: value assigned to `line_num3` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2624:10
     |
2624 |     let mut line_num3 = start_lines1.dims()[0] as u32;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `div_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2646:10
     |
2646 |     let mut div_idx = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ones` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2648:10
     |
2648 |     let mut ones = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `top_keys` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2650:10
     |
2650 |     let mut top_keys = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `table` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2653:10
     |
2653 |     let mut table = arrayfire::constant::<bool>(false,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inarr` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2655:10
     |
2655 |     let mut inarr = arrayfire::constant::<bool>(false,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `table_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2657:10
     |
2657 |     let mut table_idx = arrayfire::constant::<u32>(0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `input_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2825:6
     |
2825 |     let input_size: u64 = netdata.input_size.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2827:6
     |
2827 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2828:6
     |
2828 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2830:6
     |
2830 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2835:6
     |
2835 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2836:6
     |
2836 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2837:6
     |
2837 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2838:6
     |
2838 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2841:6
     |
2841 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: unused variable: `neuron_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2852:6
     |
2852 |     let neuron_num = neuron_dims[0];
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_num`

warning: variable `cur_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2892:10
     |
2892 |     let mut cur_num = idxsel.dims()[0];
     |             ^^^^^^^
     |
     = note: consider using `_cur_num` instead

warning: variable `line_num` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2948:10
     |
2948 |     let mut line_num = start_line.dims()[0] as u32;
     |             ^^^^^^^^
     |
     = note: consider using `_line_num` instead

warning: value assigned to `newWRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3019:10
     |
3019 |     let mut newWRowIdxCOO = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `newWColIdx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3021:10
     |
3021 |     let mut newWColIdx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `start_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3028:10
     |
3028 |     let mut start_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines1`

warning: unused variable: `end_lines1`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3029:10
     |
3029 |     let mut end_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines1`

warning: unused variable: `start_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3031:10
     |
3031 |     let mut start_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_lines2`

warning: unused variable: `end_lines2`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3032:10
     |
3032 |     let mut end_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_end_lines2`

warning: value assigned to `cur_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3041:3
     |
3041 |         cur_num = idxsel.dims()[0];
     |         ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `line_num` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3095:3
     |
3095 |         line_num = start_line.dims()[0] as u32;
     |         ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2926:6
     |
2926 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/(2*neuron_pos.dims()[0])) as u64);
     |         ----^^^^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:2950:6
     |
2950 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/(start_line.dims()[0])) as u64);
     |         ----^^^^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3028:6
     |
3028 |     let mut start_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3029:6
     |
3029 |     let mut end_lines1 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3031:6
     |
3031 |     let mut start_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3032:6
     |
3032 |     let mut end_lines2 = arrayfire::constant::<f32>(0.0,single_dims);
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `output_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3259:6
     |
3259 |     let output_size: u64 = netdata.output_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3260:6
     |
3260 |     let proc_num: u64 = netdata.proc_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3261:6
     |
3261 |     let active_size: u64 = netdata.active_size.clone();
     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3262:6
     |
3262 |     let space_dims: u64 = netdata.space_dims.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3263:6
     |
3263 |     let step_num: u64 = netdata.step_num.clone();
     |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `time_step`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3268:6
     |
3268 |     let time_step: f32 = netdata.time_step.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3269:6
     |
3269 |     let nratio: f32 = netdata.nratio.clone();
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3270:6
     |
3270 |     let neuron_std: f32 = netdata.neuron_std.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3271:6
     |
3271 |     let sphere_rad: f32 = netdata.sphere_rad.clone();
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `init_prob`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3274:6
     |
3274 |     let init_prob: f32 = netdata.init_prob.clone();
     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_init_prob`

warning: value assigned to `gidxOld` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3301:10
     |
3301 |     let mut gidxOld = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3359:10
     |
3359 |     let mut hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3362:10
     |
3362 |     let mut tiled_input_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tiled_hidden_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3364:10
     |
3364 |     let mut tiled_hidden_idx = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `circle_radius` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3373:10
     |
3373 |     let mut circle_radius = arrayfire::constant::<f32>(neuron_rad,arrayfire::Dim4::new(&[hidden_pos.dims()[0],1,1,1]));
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `dir_line` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3379:13
     |
3379 |     let mut dir_line = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `raytrace_batch_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3383:10
     |
3383 |     let mut raytrace_batch_size = 1 + ((RAYTRACE_LIMIT/start_line.dims()[0]) as u64);
     |             ^^^^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable `hidden_size_u32` is assigned to, but never used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3388:10
     |
3388 |     let mut hidden_size_u32 = hidden_pos_total.dims()[0] as u32;
     |             ^^^^^^^^^^^^^^^
     |
     = note: consider using `_hidden_size_u32` instead

warning: value assigned to `hidden_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3389:10
     |
3389 |     let mut hidden_size = hidden_pos_total.dims()[0];
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3399:10
     |
3399 |     let mut gidx1 = arrayfire::constant::<u64>(0,single_dims);
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3408:10
     |
3408 |     let mut input_idx_size = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `select_input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3414:10
     |
3414 |     let mut select_input_idx: u64 = 0;
     |             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3417:10
     |
3417 |     let mut input_pos = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3418:10
     |
3418 |     let mut input_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_pos` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3421:10
     |
3421 |     let mut glia_pos = arrayfire::constant::<f32>(0.0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `glia_idx` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3422:10
     |
3422 |     let mut glia_idx  = arrayfire::constant::<i32>(0,single_dims);
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `vv`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3427:6
     |
3427 |     for vv in 0..max_rounds
     |         ^^ help: if this is intentional, prefix it with an underscore: `_vv`

warning: unused variable: `target_input`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3430:7
     |
3430 |         let target_input = arrayfire::row(input_pos_total, select_input_idx as i64);
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_input`

warning: value assigned to `hidden_size_u32` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3469:3
     |
3469 |         hidden_size_u32 = hidden_idx.dims()[0] as u32;
     |         ^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:3401:6
     |
3401 |     let mut gidx1_cpu:Vec<u64> = Vec::new();
     |         ----^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:240:6
    |
240 |     let mut outarr = arrayfire::Array::new(&arr, dims2);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `start` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:270:10
    |
270 |     let mut start:usize = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:271:10
    |
271 |     let mut end:usize = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `key`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:305:7
    |
305 |     for (key, value) in dataset {
    |          ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:329:7
    |
329 |         let mut ones = arrayfire::constant::<f64>(1.0,selidx.dims());
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `newidx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:452:10
    |
452 |     let mut newidx: u64 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `temparr` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:524:10
    |
524 |     let mut temparr = arrayfire::constant::<f64>(0.0, temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:580:6
    |
580 |     let mut wtr0 = vec_cpu_to_str(invec);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:882:6
    |
882 |     let mut lines = contents.split("\n");
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:1119:6
     |
1119 |     let mut  neural_network:   neural_network_type = neural_network_type {
     |         -----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `newnetdata`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:1231:6
     |
1231 |     let newnetdata = network_metadata_type {
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_newnetdata`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:1155:6
     |
1155 |     let mut lines = contents.split("\n");
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:240:6
    |
240 |     let mut outarr = arrayfire::Array::new(&arr, dims2);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `start` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:270:10
    |
270 |     let mut start:usize = 0;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `end` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:271:10
    |
271 |     let mut end:usize = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `key`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:305:7
    |
305 |     for (key, value) in dataset {
    |          ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:329:7
    |
329 |         let mut ones = arrayfire::constant::<f32>(1.0,selidx.dims());
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `newidx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:452:10
    |
452 |     let mut newidx: u64 = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `temparr` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:524:10
    |
524 |     let mut temparr = arrayfire::constant::<f32>(0.0, temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:580:6
    |
580 |     let mut wtr0 = vec_cpu_to_str(invec);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:882:6
    |
882 |     let mut lines = contents.split("\n");
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:1119:6
     |
1119 |     let mut  neural_network:   neural_network_type = neural_network_type {
     |         -----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: unused variable: `newnetdata`
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:1231:6
     |
1231 |     let newnetdata = network_metadata_type {
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_newnetdata`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:1155:6
     |
1155 |     let mut lines = contents.split("\n");
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `istart` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:91:13
   |
91 |     let mut istart = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `iend` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:92:13
   |
92 |     let mut iend = 0;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bstart` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:93:13
   |
93 |     let mut bstart = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bend` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:94:13
   |
94 |     let mut bend = 0;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `istart` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:313:13
    |
313 |     let mut istart = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `iend` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:314:13
    |
314 |     let mut iend = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `segs` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:315:13
    |
315 |     let mut segs = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `lookup_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f64.rs:449:6
    |
449 |     let lookup_size = target_dims[lookup_dim as usize];
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_lookup_size`

warning: value assigned to `istart` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:91:13
   |
91 |     let mut istart = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `iend` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:92:13
   |
92 |     let mut iend = 0;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bstart` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:93:13
   |
93 |     let mut bstart = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `bend` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:94:13
   |
94 |     let mut bend = 0;
   |             ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `istart` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:313:13
    |
313 |     let mut istart = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `iend` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:314:13
    |
314 |     let mut iend = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `segs` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:315:13
    |
315 |     let mut segs = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `lookup_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_f32.rs:449:6
    |
449 |     let lookup_size = target_dims[lookup_dim as usize];
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_lookup_size`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_i32.rs:35:9
   |
35 |     let mut indexarr = arrayfire::iota::<i32>(idxsel.dims(),single);
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: value assigned to `startseq` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_i32.rs:95:13
   |
95 |     let mut startseq: u64 = 0;
   |             ^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_i32.rs:96:13
   |
96 |     let mut endseq: u64 = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_i32.rs:226:6
    |
226 |     let mut WRowIdxCOO_cpu: Vec<i32> = rowdiff_cpu.into_par_iter().enumerate().map(gen_const).flatten_iter().collect();
    |         ----^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `startseq` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_u64.rs:49:13
   |
49 |     let mut startseq: u64 = 0;
   |             ^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `endseq` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/large_sparse_u64.rs:50:13
   |
50 |     let mut endseq: u64 = 0;
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:174:12
    |
174 |     let (_,mut idx) = arrayfire::sort_index(&abs, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:218:6
    |
218 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:219:6
    |
219 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:220:6
    |
220 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:221:6
    |
221 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:222:6
    |
222 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: value assigned to `cur_rows` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:298:17
    |
298 |         let mut cur_rows = 0;
    |                 ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cur_cols` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:299:17
    |
299 |         let mut cur_cols = 0;
    |                 ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:225:9
    |
225 |     let mut abs = arrayfire::abs(&WValues);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:230:6
    |
230 |     let mut gidx1 = get_global_weight_idx(
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:384:12
    |
384 |     let (_,mut idx) = arrayfire::sort_index(&abs, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:432:6
    |
432 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:433:6
    |
433 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:580:6
    |
580 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:727:9
    |
727 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:768:12
    |
768 |     let (_,mut idx) = arrayfire::sort_index(&values, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:773:9
    |
773 |     let mut sel = arrayfire::rows(&idx, 0, (idxnum-del_num-1)  as i64);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:835:9
    |
835 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:882:12
    |
882 |     let (_,mut idx) = arrayfire::sort_index(&values, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:887:9
    |
887 |     let mut sel = arrayfire::rows(&idx, 0, (idxnum-del_num-1)  as i64);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:174:12
    |
174 |     let (_,mut idx) = arrayfire::sort_index(&abs, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:218:6
    |
218 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:219:6
    |
219 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:220:6
    |
220 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:221:6
    |
221 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:222:6
    |
222 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: value assigned to `cur_rows` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:298:17
    |
298 |         let mut cur_rows = 0;
    |                 ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cur_cols` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:299:17
    |
299 |         let mut cur_cols = 0;
    |                 ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:225:9
    |
225 |     let mut abs = arrayfire::abs(&WValues);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:230:6
    |
230 |     let mut gidx1 = get_global_weight_idx(
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:384:12
    |
384 |     let (_,mut idx) = arrayfire::sort_index(&abs, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:432:6
    |
432 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:433:6
    |
433 |     let output_size: u64 = netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:580:6
    |
580 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:727:9
    |
727 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:768:12
    |
768 |     let (_,mut idx) = arrayfire::sort_index(&values, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:773:9
    |
773 |     let mut sel = arrayfire::rows(&idx, 0, (idxnum-del_num-1)  as i64);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:835:9
    |
835 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:882:12
    |
882 |     let (_,mut idx) = arrayfire::sort_index(&values, 0, false);
    |            ----^^^
    |            |
    |            help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:887:9
    |
887 |     let mut sel = arrayfire::rows(&idx, 0, (idxnum-del_num-1)  as i64);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `valsel` is never read
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:54:13
   |
54 |     let mut valsel = arrayfire::constant::<i32>(0,temp_dims);
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `i`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:63:9
   |
63 |     for i in 0..depth
   |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `valsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:109:13
    |
109 |     let mut valsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `i`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:118:9
    |
118 |     for i in 0..depth
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `input_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:162:13
    |
162 |     let mut input_idx = in_idx.clone();
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `detect_out_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:163:13
    |
163 |     let mut detect_out_idx = in_idx.clone();
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `con_out_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:170:13
    |
170 |     let mut con_out_idx = in_idx.clone();
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `input_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:239:13
    |
239 |     let mut input_idx = in_idx.clone();
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `detect_out_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:240:13
    |
240 |     let mut detect_out_idx = in_idx.clone();
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable `con_out_idx` is assigned to, but never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:247:13
    |
247 |     let mut con_out_idx = in_idx.clone();
    |             ^^^^^^^^^^^
    |
    = note: consider using `_con_out_idx` instead

warning: value assigned to `con_out_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:264:9
    |
264 |         con_out_idx = arrayfire::lookup(out_idx, &detect_out_idx, 0);
    |         ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `lookup_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_u32.rs:45:6
   |
45 |     let lookup_size = target_dims[lookup_dim as usize];
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_lookup_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:124:6
    |
124 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:126:6
    |
126 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:127:6
    |
127 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:128:6
    |
128 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:129:6
    |
129 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:130:9
    |
130 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: value assigned to `valsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:152:13
    |
152 |     let mut valsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `rvec` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:154:13
    |
154 |     let mut rvec = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cvec` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:156:13
    |
156 |     let mut cvec = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dXsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:158:13
    |
158 |     let mut dXsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sparseval` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:161:13
    |
161 |     let mut sparseval = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sparserow` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:162:13
    |
162 |     let mut sparserow = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sparsecol` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:163:13
    |
163 |     let mut sparsecol = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:164:13
    |
164 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Hidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:179:13
    |
179 |     let mut Hidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Aidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:180:13
    |
180 |     let mut Aidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Bidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:181:13
    |
181 |     let mut Bidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Cidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:182:13
    |
182 |     let mut Cidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Didxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:183:13
    |
183 |     let mut Didxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Eidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:184:13
    |
184 |     let mut Eidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `combidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:185:13
    |
185 |     let mut combidxsel = idxsel.clone();
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:142:9
    |
142 |     let mut output_idxsel = newidxsel.clone();
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:306:13
    |
306 |         let mut counts = arrayfire::iota::<i32>(idxsel.dims(),repeat_dims);
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:329:17
    |
329 |         let  (_,mut sumarr) = arrayfire::sum_by_key(&sparserow, &ones, 0);
    |                 ----^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: value assigned to `cur_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:434:13
    |
434 |     let mut cur_num = cur_idx.dims()[0] as i64;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `next_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:442:13
    |
442 |     let mut next_idx = arrayfire::constant::<i32>(0,single_dims);
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `con_first_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:443:13
    |
443 |     let mut con_first_idx = arrayfire::constant::<i32>(0,single_dims);
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `COO_batch_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:451:13
    |
451 |     let mut COO_batch_size = 1 + ((COO_find_limit/filter_idx.dims()[0]) as u64);
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `inarr` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:458:13
    |
458 |     let mut inarr = arrayfire::constant::<bool>(false, single_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempidx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:460:13
    |
460 |     let mut tempidx = arrayfire::locate(&table);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:130:6
    |
130 |     let input_size: u64 = netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:132:6
    |
132 |     let proc_num: u64 = netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:133:6
    |
133 |     let active_size: u64 = netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:134:6
    |
134 |     let space_dims: u64 = netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:135:6
    |
135 |     let step_num: u64 = netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:136:9
    |
136 |     let batch_size: u64 = netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: value assigned to `valsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:161:13
    |
161 |     let mut valsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `rvec` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:163:13
    |
163 |     let mut rvec = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cvec` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:165:13
    |
165 |     let mut cvec = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `dXsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:167:13
    |
167 |     let mut dXsel = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sparseval` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:170:13
    |
170 |     let mut sparseval = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sparserow` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:171:13
    |
171 |     let mut sparserow = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sparsecol` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:172:13
    |
172 |     let mut sparsecol = arrayfire::constant::<i32>(0,temp_dims);
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `gidx1` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:173:13
    |
173 |     let mut gidx1 = arrayfire::constant::<u64>(0,temp_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Hidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:189:13
    |
189 |     let mut Hidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Aidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:190:13
    |
190 |     let mut Aidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Bidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:191:13
    |
191 |     let mut Bidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Cidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:192:13
    |
192 |     let mut Cidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Didxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:193:13
    |
193 |     let mut Didxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Eidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:194:13
    |
194 |     let mut Eidxsel = idxsel.clone();
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `combidxsel` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:195:13
    |
195 |     let mut combidxsel = idxsel.clone();
    |             ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:150:9
    |
150 |     let mut output_idxsel = newidxsel.clone();
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:367:13
    |
367 |         let mut counts = arrayfire::iota::<i32>(idxsel.dims(),repeat_dims);
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:392:17
    |
392 |         let  (_,mut sumarr) = arrayfire::sum_by_key(&sparserow, &ones, 0);
    |                 ----^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: value assigned to `cur_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:526:13
    |
526 |     let mut cur_num = cur_idx.dims()[0] as i64;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `next_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:534:13
    |
534 |     let mut next_idx = arrayfire::constant::<i32>(0,single_dims);
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `con_first_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:535:13
    |
535 |     let mut con_first_idx = arrayfire::constant::<i32>(0,single_dims);
    |             ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `COO_batch_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:543:13
    |
543 |     let mut COO_batch_size = 1 + ((COO_find_limit/filter_idx.dims()[0]) as u64);
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `inarr` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:550:13
    |
550 |     let mut inarr = arrayfire::constant::<bool>(false, single_dims);
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `tempidx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:552:13
    |
552 |     let mut tempidx = arrayfire::locate(&table);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `neuron_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:67:6
   |
67 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:68:6
   |
68 |     let input_size: u64 = (*arch_search).neural_network.netdata.input_size.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:69:6
   |
69 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `space_dims`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:72:6
   |
72 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:73:6
   |
73 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:76:6
   |
76 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
   |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:79:6
   |
79 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:80:6
   |
80 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:81:6
   |
81 |     let neuron_std: f32 = (*arch_search).neural_network.netdata.neuron_std.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:82:6
   |
82 |     let sphere_rad: f32 = (*arch_search).neural_network.netdata.sphere_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:83:6
   |
83 |     let neuron_rad: f32 = (*arch_search).neural_network.netdata.neuron_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:84:6
   |
84 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:85:6
   |
85 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:86:6
   |
86 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:87:6
   |
87 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `batch_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:90:6
   |
90 |     let batch_size: u64  = (*arch_search).neural_network.netdata.batch_size.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: value assigned to `con_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:143:10
    |
143 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `del_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:144:10
    |
144 |     let mut del_num = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `hiddennum`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:204:10
    |
204 |     let mut hiddennum = active_size - output_size - input_size;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hiddennum`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:71:6
   |
71 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
   |         ----^^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:94:6
   |
94 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:134:6
    |
134 |     let mut input_size = (*arch_search).neural_network.netdata.input_size;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:135:6
    |
135 |     let mut output_size = (*arch_search).neural_network.netdata.output_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:142:6
    |
142 |     let mut active_size = (*arch_search).neural_network.neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:204:6
    |
204 |     let mut hiddennum = active_size - output_size - input_size;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:371:6
    |
371 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:372:6
    |
372 |     let input_size: u64 = (*arch_search).neural_network.netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:373:6
    |
373 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:374:6
    |
374 |     let proc_num: u64 = (*arch_search).neural_network.netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:375:10
    |
375 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:376:6
    |
376 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:377:6
    |
377 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:380:6
    |
380 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:383:6
    |
383 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:384:6
    |
384 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:385:6
    |
385 |     let neuron_std: f32 = (*arch_search).neural_network.netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:386:6
    |
386 |     let sphere_rad: f32 = (*arch_search).neural_network.netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:387:6
    |
387 |     let neuron_rad: f32 = (*arch_search).neural_network.netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:388:6
    |
388 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:389:6
    |
389 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:390:6
    |
390 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:391:6
    |
391 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:394:6
    |
394 |     let batch_size: u64  = (*arch_search).neural_network.netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `connection_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:401:6
    |
401 |     let connection_num = WRowIdxCOO.dims()[0];
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:419:6
    |
419 |     let max_prune_num = (*arch_search).evolution_info.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `con_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:424:10
    |
424 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_num`

warning: unused variable: `hiddennum`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:485:10
    |
485 |     let mut hiddennum = active_size - output_size - input_size;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hiddennum`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:375:6
    |
375 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:398:6
    |
398 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:415:6
    |
415 |     let mut input_size = (*arch_search).neural_network.netdata.input_size;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:416:6
    |
416 |     let mut output_size = (*arch_search).neural_network.netdata.output_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:423:6
    |
423 |     let mut active_size = (*arch_search).neural_network.neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:424:6
    |
424 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:485:6
    |
485 |     let mut hiddennum = active_size - output_size - input_size;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:584:6
    |
584 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:586:6
    |
586 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:587:6
    |
587 |     let proc_num: u64 = (*arch_search).neural_network.netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:588:6
    |
588 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:589:6
    |
589 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:590:6
    |
590 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: value assigned to `input_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:637:2
    |
637 |     input_size = new_input_size;
    |     ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:678:6
    |
678 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:680:6
    |
680 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:681:6
    |
681 |     let proc_num: u64 = (*arch_search).neural_network.netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:682:6
    |
682 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:683:6
    |
683 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:684:6
    |
684 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: value assigned to `input_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f32.rs:778:2
    |
778 |     input_size = Nx*Ny*new_channels;
    |     ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `active_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:427:2
    |
427 |     active_size = neuron_pos.dims()[0];
    |     ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:271:9
    |
271 |     let mut neuron_rad: f32 = 0.1;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:492:6
    |
492 |     let mut hidden_num2 =  neuron_pos.dims()[0]-output_size -input_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:493:6
    |
493 |     let mut init_connection_num = 10;
    |         ----^^^^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:723:6
    |
723 |     let mut active_size = neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:805:6
    |
805 |     let mut  neural_network:   neural_network_type = neural_network_type {
    |         -----^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `loss_status` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:966:10
    |
966 |     let mut loss_status = loss_status_type::LOSS_OVERFLOW;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `active_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1465:2
     |
1465 |     active_size = neuron_pos.dims()[0];
     |     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1309:9
     |
1309 |     let mut neuron_rad: f32 = 0.1;
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1530:6
     |
1530 |     let mut hidden_num2 =  neuron_pos.dims()[0]-output_size -input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1531:6
     |
1531 |     let mut init_connection_num = 10;
     |         ----^^^^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1761:6
     |
1761 |     let mut active_size = neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1843:6
     |
1843 |     let mut  neural_network:   neural_network_type = neural_network_type {
     |         -----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `active_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:318:10
    |
318 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:319:6
    |
319 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:320:6
    |
320 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:323:6
    |
323 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:326:6
    |
326 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:327:6
    |
327 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:328:6
    |
328 |     let neuron_std: f32 = (*arch_search).neural_network.netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:329:6
    |
329 |     let sphere_rad: f32 = (*arch_search).neural_network.netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:330:6
    |
330 |     let neuron_rad: f32 = (*arch_search).neural_network.netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:331:6
    |
331 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:332:6
    |
332 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:333:6
    |
333 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:334:6
    |
334 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `alpha` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:368:10
    |
368 |     let mut alpha: f32 = 0.0001;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `Qslices`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:374:6
    |
374 |     let Qslices: u64 = Q.dims()[2];
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_Qslices`

warning: value assigned to `X` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:520:10
    |
520 |     let mut X =  arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:522:10
    |
522 |     let mut Y =  arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `global_alpha_max` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:642:10
    |
642 |     let mut global_alpha_max = LR_MAX;
    |             ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `k`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:651:7
    |
651 |         for k in 0..LR_BUFFER
    |             ^ help: if this is intentional, prefix it with an underscore: `_k`

warning: value assigned to `global_alpha_max` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:665:3
    |
665 |         global_alpha_max =  minelem;
    |         ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `alpha_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:670:10
    |
670 |     let mut alpha_idx = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `eval_metric_out` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:684:10
    |
684 |     let mut eval_metric_out = Vec::new();
    |             ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Yhat_out` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:685:10
    |
685 |     let mut Yhat_out = nohash_hasher::IntMap::default();
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `avgelem` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:688:10
    |
688 |     let mut avgelem = LARGE_POS_NUM_f32;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `crossval_mean_loss` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:689:10
    |
689 |     let mut crossval_mean_loss = LARGE_POS_NUM_f32;
    |             ^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `k`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:846:8
    |
846 |             for k in 0..(  (alpha_idx+10) - alpha_max_vec.len()  )
    |                 ^ help: if this is intentional, prefix it with an underscore: `_k`

warning: value assigned to `active_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:1167:6
     |
1167 |                     active_size = (*arch_search).neural_network.netdata.active_size;
     |                     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `WRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:1294:6
     |
1294 |                     WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
     |                     ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `active_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:70:6
   |
70 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:71:6
   |
71 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:72:6
   |
72 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:75:6
   |
75 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
   |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:78:6
   |
78 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:79:6
   |
79 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:80:6
   |
80 |     let neuron_std: f32 = (*arch_search).neural_network.netdata.neuron_std.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:81:6
   |
81 |     let sphere_rad: f32 = (*arch_search).neural_network.netdata.sphere_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:82:6
   |
82 |     let neuron_rad: f32 = (*arch_search).neural_network.netdata.neuron_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:83:6
   |
83 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:84:6
   |
84 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:85:6
   |
85 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:86:6
   |
86 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `mt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:143:10
    |
143 |     let mut mt = arrayfire::constant::<f32>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_mt`

warning: unused variable: `vt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:144:10
    |
144 |     let mut vt = arrayfire::constant::<f32>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_vt`

warning: unused variable: `grad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:145:10
    |
145 |     let mut grad = arrayfire::constant::<f32>(0.0,mt_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_grad`

warning: value assigned to `train_X` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:286:10
    |
286 |     let mut train_X =  arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:288:10
    |
288 |     let mut Y =  arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:299:2
    |
299 |     Y = arrayfire::Array::new(&validationdata_Y[&batch_idx], Y_dims);
    |     ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:103:6
    |
103 |     let mut WValues = arrayfire::rows(
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:137:6
    |
137 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:143:6
    |
143 |     let mut mt = arrayfire::constant::<f32>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:144:6
    |
144 |     let mut vt = arrayfire::constant::<f32>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:145:6
    |
145 |     let mut grad = arrayfire::constant::<f32>(0.0,mt_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:289:6
    |
289 |     let mut batch_idx = 0;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:408:6
    |
408 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:409:6
    |
409 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:410:6
    |
410 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:413:6
    |
413 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:416:6
    |
416 |     let time_step: f32 = (*arch_search).neural_network.netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:417:6
    |
417 |     let nratio: f32 = (*arch_search).neural_network.netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:418:6
    |
418 |     let neuron_std: f32 = (*arch_search).neural_network.netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:419:6
    |
419 |     let sphere_rad: f32 = (*arch_search).neural_network.netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:420:6
    |
420 |     let neuron_rad: f32 = (*arch_search).neural_network.netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:421:6
    |
421 |     let con_rad: f32 = (*arch_search).neural_network.netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:422:6
    |
422 |     let center_const: f32 = (*arch_search).neural_network.netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:423:6
    |
423 |     let spring_const: f32 = (*arch_search).neural_network.netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:424:6
    |
424 |     let repel_const: f32 = (*arch_search).neural_network.netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `mt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:481:10
    |
481 |     let mut mt = arrayfire::constant::<f32>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_mt`

warning: unused variable: `vt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:482:10
    |
482 |     let mut vt = arrayfire::constant::<f32>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_vt`

warning: unused variable: `grad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:483:10
    |
483 |     let mut grad = arrayfire::constant::<f32>(0.0,mt_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_grad`

warning: value assigned to `train_X` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:624:10
    |
624 |     let mut train_X =  arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `Y_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:625:6
    |
625 |     let Y_dims = arrayfire::Dim4::new(&[output_size,batch_size,traj_size,1]);
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_Y_dims`

warning: unused variable: `Y`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:626:10
    |
626 |     let mut Y =  arrayfire::constant::<f32>(0.0,temp_dims);
    |             ^ help: if this is intentional, prefix it with an underscore: `_Y`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:441:6
    |
441 |     let mut WValues = arrayfire::rows(
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:475:6
    |
475 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:481:6
    |
481 |     let mut mt = arrayfire::constant::<f32>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:482:6
    |
482 |     let mut vt = arrayfire::constant::<f32>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:483:6
    |
483 |     let mut grad = arrayfire::constant::<f32>(0.0,mt_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:626:6
    |
626 |     let mut Y =  arrayfire::constant::<f32>(0.0,temp_dims);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f32.rs:627:6
    |
627 |     let mut batch_idx = 0;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:67:6
   |
67 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:68:6
   |
68 |     let input_size: u64 = (*arch_search).neural_network.netdata.input_size.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:69:6
   |
69 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `space_dims`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:72:6
   |
72 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:73:6
   |
73 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:76:6
   |
76 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
   |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:79:6
   |
79 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:80:6
   |
80 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:81:6
   |
81 |     let neuron_std: f64 = (*arch_search).neural_network.netdata.neuron_std.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:82:6
   |
82 |     let sphere_rad: f64 = (*arch_search).neural_network.netdata.sphere_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:83:6
   |
83 |     let neuron_rad: f64 = (*arch_search).neural_network.netdata.neuron_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:84:6
   |
84 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:85:6
   |
85 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:86:6
   |
86 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:87:6
   |
87 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `batch_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:90:6
   |
90 |     let batch_size: u64  = (*arch_search).neural_network.netdata.batch_size.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: value assigned to `con_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:143:10
    |
143 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `del_num` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:144:10
    |
144 |     let mut del_num = 0;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `hiddennum`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:204:10
    |
204 |     let mut hiddennum = active_size - output_size - input_size;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hiddennum`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:71:6
   |
71 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
   |         ----^^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:94:6
   |
94 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:134:6
    |
134 |     let mut input_size = (*arch_search).neural_network.netdata.input_size;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:135:6
    |
135 |     let mut output_size = (*arch_search).neural_network.netdata.output_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:142:6
    |
142 |     let mut active_size = (*arch_search).neural_network.neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:204:6
    |
204 |     let mut hiddennum = active_size - output_size - input_size;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:371:6
    |
371 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `input_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:372:6
    |
372 |     let input_size: u64 = (*arch_search).neural_network.netdata.input_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:373:6
    |
373 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:374:6
    |
374 |     let proc_num: u64 = (*arch_search).neural_network.netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:375:10
    |
375 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:376:6
    |
376 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:377:6
    |
377 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:380:6
    |
380 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:383:6
    |
383 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:384:6
    |
384 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:385:6
    |
385 |     let neuron_std: f64 = (*arch_search).neural_network.netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:386:6
    |
386 |     let sphere_rad: f64 = (*arch_search).neural_network.netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:387:6
    |
387 |     let neuron_rad: f64 = (*arch_search).neural_network.netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:388:6
    |
388 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:389:6
    |
389 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:390:6
    |
390 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:391:6
    |
391 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `batch_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:394:6
    |
394 |     let batch_size: u64  = (*arch_search).neural_network.netdata.batch_size.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`

warning: unused variable: `connection_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:401:6
    |
401 |     let connection_num = WRowIdxCOO.dims()[0];
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection_num`

warning: unused variable: `max_prune_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:419:6
    |
419 |     let max_prune_num = (*arch_search).evolution_info.max_prune_num;
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_prune_num`

warning: unused variable: `con_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:424:10
    |
424 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_num`

warning: unused variable: `hiddennum`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:485:10
    |
485 |     let mut hiddennum = active_size - output_size - input_size;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hiddennum`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:375:6
    |
375 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:398:6
    |
398 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:415:6
    |
415 |     let mut input_size = (*arch_search).neural_network.netdata.input_size;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:416:6
    |
416 |     let mut output_size = (*arch_search).neural_network.netdata.output_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:423:6
    |
423 |     let mut active_size = (*arch_search).neural_network.neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:424:6
    |
424 |     let mut con_num = (*arch_search).neural_network.WColIdx.dims()[0];
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:485:6
    |
485 |     let mut hiddennum = active_size - output_size - input_size;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:584:6
    |
584 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:586:6
    |
586 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:587:6
    |
587 |     let proc_num: u64 = (*arch_search).neural_network.netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:588:6
    |
588 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:589:6
    |
589 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:590:6
    |
590 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: value assigned to `input_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:637:2
    |
637 |     input_size = new_input_size;
    |     ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `neuron_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:678:6
    |
678 |     let neuron_size: u64 = (*arch_search).neural_network.netdata.neuron_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_size`

warning: unused variable: `output_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:680:6
    |
680 |     let output_size: u64 = (*arch_search).neural_network.netdata.output_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: unused variable: `proc_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:681:6
    |
681 |     let proc_num: u64 = (*arch_search).neural_network.netdata.proc_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proc_num`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:682:6
    |
682 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:683:6
    |
683 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:684:6
    |
684 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: value assigned to `input_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotransfer_f64.rs:778:2
    |
778 |     input_size = Nx*Ny*new_channels;
    |     ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `active_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:427:2
    |
427 |     active_size = neuron_pos.dims()[0];
    |     ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:271:9
    |
271 |     let mut neuron_rad: f64 = 0.1;
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:492:6
    |
492 |     let mut hidden_num2 =  neuron_pos.dims()[0]-output_size -input_size;
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:493:6
    |
493 |     let mut init_connection_num = 10;
    |         ----^^^^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:723:6
    |
723 |     let mut active_size = neuron_idx.dims()[0];
    |         ----^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:805:6
    |
805 |     let mut  neural_network:   neural_network_type = neural_network_type {
    |         -----^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `loss_status` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:966:10
    |
966 |     let mut loss_status = loss_status_type::LOSS_OVERFLOW;
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `active_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1465:2
     |
1465 |     active_size = neuron_pos.dims()[0];
     |     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1309:9
     |
1309 |     let mut neuron_rad: f64 = 0.1;
     |         ----^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1530:6
     |
1530 |     let mut hidden_num2 =  neuron_pos.dims()[0]-output_size -input_size;
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1531:6
     |
1531 |     let mut init_connection_num = 10;
     |         ----^^^^^^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1761:6
     |
1761 |     let mut active_size = neuron_idx.dims()[0];
     |         ----^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1843:6
     |
1843 |     let mut  neural_network:   neural_network_type = neural_network_type {
     |         -----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `active_size` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:318:10
    |
318 |     let mut active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:319:6
    |
319 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:320:6
    |
320 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:323:6
    |
323 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:326:6
    |
326 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:327:6
    |
327 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:328:6
    |
328 |     let neuron_std: f64 = (*arch_search).neural_network.netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:329:6
    |
329 |     let sphere_rad: f64 = (*arch_search).neural_network.netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:330:6
    |
330 |     let neuron_rad: f64 = (*arch_search).neural_network.netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:331:6
    |
331 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:332:6
    |
332 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:333:6
    |
333 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:334:6
    |
334 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: value assigned to `alpha` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:368:10
    |
368 |     let mut alpha: f64 = 0.0001;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `Qslices`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:374:6
    |
374 |     let Qslices: u64 = Q.dims()[2];
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_Qslices`

warning: value assigned to `X` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:520:10
    |
520 |     let mut X =  arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:522:10
    |
522 |     let mut Y =  arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `global_alpha_max` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:639:10
    |
639 |     let mut global_alpha_max = LR_MAX;
    |             ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `k`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:648:7
    |
648 |         for k in 0..LR_BUFFER
    |             ^ help: if this is intentional, prefix it with an underscore: `_k`

warning: value assigned to `global_alpha_max` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:662:3
    |
662 |         global_alpha_max =  minelem;
    |         ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `alpha_idx` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:667:10
    |
667 |     let mut alpha_idx = 0;
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `eval_metric_out` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:681:10
    |
681 |     let mut eval_metric_out = Vec::new();
    |             ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Yhat_out` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:682:10
    |
682 |     let mut Yhat_out = nohash_hasher::IntMap::default();
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `avgelem` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:685:10
    |
685 |     let mut avgelem = LARGE_POS_NUM_f64;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `crossval_mean_loss` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:686:10
    |
686 |     let mut crossval_mean_loss = LARGE_POS_NUM_f64;
    |             ^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `k`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:843:8
    |
843 |             for k in 0..(  (alpha_idx+10) - alpha_max_vec.len()  )
    |                 ^ help: if this is intentional, prefix it with an underscore: `_k`

warning: value assigned to `active_size` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:1164:6
     |
1164 |                     active_size = (*arch_search).neural_network.netdata.active_size;
     |                     ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `WRowIdxCOO` is never read
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:1291:6
     |
1291 |                     WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
     |                     ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `active_size`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:70:6
   |
70 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:71:6
   |
71 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:72:6
   |
72 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:75:6
   |
75 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
   |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:78:6
   |
78 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:79:6
   |
79 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:80:6
   |
80 |     let neuron_std: f64 = (*arch_search).neural_network.netdata.neuron_std.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:81:6
   |
81 |     let sphere_rad: f64 = (*arch_search).neural_network.netdata.sphere_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:82:6
   |
82 |     let neuron_rad: f64 = (*arch_search).neural_network.netdata.neuron_rad.clone();
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:83:6
   |
83 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:84:6
   |
84 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:85:6
   |
85 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:86:6
   |
86 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `mt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:143:10
    |
143 |     let mut mt = arrayfire::constant::<f64>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_mt`

warning: unused variable: `vt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:144:10
    |
144 |     let mut vt = arrayfire::constant::<f64>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_vt`

warning: unused variable: `grad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:145:10
    |
145 |     let mut grad = arrayfire::constant::<f64>(0.0,mt_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_grad`

warning: value assigned to `train_X` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:286:10
    |
286 |     let mut train_X =  arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:288:10
    |
288 |     let mut Y =  arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:299:2
    |
299 |     Y = arrayfire::Array::new(&validationdata_Y[&batch_idx], Y_dims);
    |     ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:103:6
    |
103 |     let mut WValues = arrayfire::rows(
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:137:6
    |
137 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:143:6
    |
143 |     let mut mt = arrayfire::constant::<f64>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:144:6
    |
144 |     let mut vt = arrayfire::constant::<f64>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:145:6
    |
145 |     let mut grad = arrayfire::constant::<f64>(0.0,mt_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:289:6
    |
289 |     let mut batch_idx = 0;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `active_size`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:408:6
    |
408 |     let active_size: u64 = (*arch_search).neural_network.netdata.active_size.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_active_size`

warning: unused variable: `space_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:409:6
    |
409 |     let space_dims: u64 = (*arch_search).neural_network.netdata.space_dims.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_dims`

warning: unused variable: `step_num`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:410:6
    |
410 |     let step_num: u64 = (*arch_search).neural_network.netdata.step_num.clone();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_step_num`

warning: unused variable: `del_unused_neuron`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:413:6
    |
413 |     let del_unused_neuron: bool = (*arch_search).neural_network.netdata.del_unused_neuron.clone();
    |         ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_del_unused_neuron`

warning: unused variable: `time_step`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:416:6
    |
416 |     let time_step: f64 = (*arch_search).neural_network.netdata.time_step.clone();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_step`

warning: unused variable: `nratio`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:417:6
    |
417 |     let nratio: f64 = (*arch_search).neural_network.netdata.nratio.clone();
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_nratio`

warning: unused variable: `neuron_std`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:418:6
    |
418 |     let neuron_std: f64 = (*arch_search).neural_network.netdata.neuron_std.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_std`

warning: unused variable: `sphere_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:419:6
    |
419 |     let sphere_rad: f64 = (*arch_search).neural_network.netdata.sphere_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sphere_rad`

warning: unused variable: `neuron_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:420:6
    |
420 |     let neuron_rad: f64 = (*arch_search).neural_network.netdata.neuron_rad.clone();
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neuron_rad`

warning: unused variable: `con_rad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:421:6
    |
421 |     let con_rad: f64 = (*arch_search).neural_network.netdata.con_rad.clone();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_con_rad`

warning: unused variable: `center_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:422:6
    |
422 |     let center_const: f64 = (*arch_search).neural_network.netdata.center_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_center_const`

warning: unused variable: `spring_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:423:6
    |
423 |     let spring_const: f64 = (*arch_search).neural_network.netdata.spring_const.clone();
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_spring_const`

warning: unused variable: `repel_const`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:424:6
    |
424 |     let repel_const: f64 = (*arch_search).neural_network.netdata.repel_const.clone();
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_repel_const`

warning: unused variable: `mt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:481:10
    |
481 |     let mut mt = arrayfire::constant::<f64>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_mt`

warning: unused variable: `vt`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:482:10
    |
482 |     let mut vt = arrayfire::constant::<f64>(0.0,mt_dims);
    |             ^^ help: if this is intentional, prefix it with an underscore: `_vt`

warning: unused variable: `grad`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:483:10
    |
483 |     let mut grad = arrayfire::constant::<f64>(0.0,mt_dims);
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_grad`

warning: value assigned to `train_X` is never read
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:624:10
    |
624 |     let mut train_X =  arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `Y_dims`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:625:6
    |
625 |     let Y_dims = arrayfire::Dim4::new(&[output_size,batch_size,traj_size,1]);
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_Y_dims`

warning: unused variable: `Y`
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:626:10
    |
626 |     let mut Y =  arrayfire::constant::<f64>(0.0,temp_dims);
    |             ^ help: if this is intentional, prefix it with an underscore: `_Y`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:441:6
    |
441 |     let mut WValues = arrayfire::rows(
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:475:6
    |
475 |     let mut WRowIdxCOO = CSR_to_COO(&((*arch_search).neural_network.WRowIdxCSR));
    |         ----^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:481:6
    |
481 |     let mut mt = arrayfire::constant::<f64>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:482:6
    |
482 |     let mut vt = arrayfire::constant::<f64>(0.0,mt_dims);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:483:6
    |
483 |     let mut grad = arrayfire::constant::<f64>(0.0,mt_dims);
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:626:6
    |
626 |     let mut Y =  arrayfire::constant::<f64>(0.0,temp_dims);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotest_f64.rs:627:6
    |
627 |     let mut batch_idx = 0;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: constant `ODE45_C2` is never used
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:7:7
  |
7 | const ODE45_C2: f64 = 1.0/5.0;
  |       ^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: constant `ODE45_A21` is never used
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:8:7
  |
8 | const ODE45_A21: f64 = 1.0/5.0;
  |       ^^^^^^^^^

warning: constant `ODE45_C3` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:10:7
   |
10 | const ODE45_C3: f64 = 3.0/10.0;
   |       ^^^^^^^^

warning: constant `ODE45_A31` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:11:7
   |
11 | const ODE45_A31: f64 = 3.0/40.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A32` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:12:7
   |
12 | const ODE45_A32: f64 = 9.0/40.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C4` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:14:7
   |
14 | const ODE45_C4: f64 = 4.0/5.0;
   |       ^^^^^^^^

warning: constant `ODE45_A41` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:15:7
   |
15 | const ODE45_A41: f64 = 44.0/45.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A42` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:16:7
   |
16 | const ODE45_A42: f64 = -56.0/15.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A43` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:17:7
   |
17 | const ODE45_A43: f64 = 32.0/9.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C5` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:19:7
   |
19 | const ODE45_C5: f64 = 8.0/9.0;
   |       ^^^^^^^^

warning: constant `ODE45_A51` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:20:7
   |
20 | const ODE45_A51: f64 = 19372.0/6561.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A52` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:21:7
   |
21 | const ODE45_A52: f64 = -25360.0/2187.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A53` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:22:7
   |
22 | const ODE45_A53: f64 = 64448.0/6561.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A54` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:23:7
   |
23 | const ODE45_A54: f64 = -212.0/729.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C6` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:25:7
   |
25 | const ODE45_C6: f64 = 1.0;
   |       ^^^^^^^^

warning: constant `ODE45_A61` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:26:7
   |
26 | const ODE45_A61: f64 = 9017.0/3168.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A62` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:27:7
   |
27 | const ODE45_A62: f64 = -355.0/33.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A63` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:28:7
   |
28 | const ODE45_A63: f64 = 46732.0/5247.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A64` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:29:7
   |
29 | const ODE45_A64: f64 = 49.0/176.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A65` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:30:7
   |
30 | const ODE45_A65: f64 = -5103.0/18656.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C7` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:32:7
   |
32 | const ODE45_C7: f64 = 1.0;
   |       ^^^^^^^^

warning: constant `ODE45_B1` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:45:7
   |
45 | const ODE45_B1: f64 = 35.0/384.0;
   |       ^^^^^^^^

warning: constant `ODE45_B3` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:47:7
   |
47 | const ODE45_B3: f64 = 500.0/1113.0;
   |       ^^^^^^^^

warning: constant `ODE45_B4` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:48:7
   |
48 | const ODE45_B4: f64 = 125.0/192.0;
   |       ^^^^^^^^

warning: constant `ODE45_B5` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:49:7
   |
49 | const ODE45_B5: f64 = -2187.0/6784.0;
   |       ^^^^^^^^

warning: constant `ODE45_B6` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:50:7
   |
50 | const ODE45_B6: f64 = 11.0/84.0;
   |       ^^^^^^^^

warning: constant `ODE45_B1E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:55:7
   |
55 | const ODE45_B1E: f64 = 5179.0/57600.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B3E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:57:7
   |
57 | const ODE45_B3E: f64 = 7571.0/16695.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B4E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:58:7
   |
58 | const ODE45_B4E: f64 = 393.0/640.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B5E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:59:7
   |
59 | const ODE45_B5E: f64 = -92097.0/339200.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B6E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:60:7
   |
60 | const ODE45_B6E: f64 = 187.0/2100.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B7E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f64.rs:61:7
   |
61 | const ODE45_B7E: f64 = 1.0/40.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C2` is never used
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:7:7
  |
7 | const ODE45_C2: f32 = 1.0/5.0;
  |       ^^^^^^^^

warning: constant `ODE45_A21` is never used
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:8:7
  |
8 | const ODE45_A21: f32 = 1.0/5.0;
  |       ^^^^^^^^^

warning: constant `ODE45_C3` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:10:7
   |
10 | const ODE45_C3: f32 = 3.0/10.0;
   |       ^^^^^^^^

warning: constant `ODE45_A31` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:11:7
   |
11 | const ODE45_A31: f32 = 3.0/40.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A32` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:12:7
   |
12 | const ODE45_A32: f32 = 9.0/40.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C4` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:14:7
   |
14 | const ODE45_C4: f32 = 4.0/5.0;
   |       ^^^^^^^^

warning: constant `ODE45_A41` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:15:7
   |
15 | const ODE45_A41: f32 = 44.0/45.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A42` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:16:7
   |
16 | const ODE45_A42: f32 = -56.0/15.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A43` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:17:7
   |
17 | const ODE45_A43: f32 = 32.0/9.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C5` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:19:7
   |
19 | const ODE45_C5: f32 = 8.0/9.0;
   |       ^^^^^^^^

warning: constant `ODE45_A51` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:20:7
   |
20 | const ODE45_A51: f32 = 19372.0/6561.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A52` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:21:7
   |
21 | const ODE45_A52: f32 = -25360.0/2187.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A53` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:22:7
   |
22 | const ODE45_A53: f32 = 64448.0/6561.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A54` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:23:7
   |
23 | const ODE45_A54: f32 = -212.0/729.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C6` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:25:7
   |
25 | const ODE45_C6: f32 = 1.0;
   |       ^^^^^^^^

warning: constant `ODE45_A61` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:26:7
   |
26 | const ODE45_A61: f32 = 9017.0/3168.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A62` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:27:7
   |
27 | const ODE45_A62: f32 = -355.0/33.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A63` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:28:7
   |
28 | const ODE45_A63: f32 = 46732.0/5247.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A64` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:29:7
   |
29 | const ODE45_A64: f32 = 49.0/176.0;
   |       ^^^^^^^^^

warning: constant `ODE45_A65` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:30:7
   |
30 | const ODE45_A65: f32 = -5103.0/18656.0;
   |       ^^^^^^^^^

warning: constant `ODE45_C7` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:32:7
   |
32 | const ODE45_C7: f32 = 1.0;
   |       ^^^^^^^^

warning: constant `ODE45_B1` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:45:7
   |
45 | const ODE45_B1: f32 = 35.0/384.0;
   |       ^^^^^^^^

warning: constant `ODE45_B3` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:47:7
   |
47 | const ODE45_B3: f32 = 500.0/1113.0;
   |       ^^^^^^^^

warning: constant `ODE45_B4` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:48:7
   |
48 | const ODE45_B4: f32 = 125.0/192.0;
   |       ^^^^^^^^

warning: constant `ODE45_B5` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:49:7
   |
49 | const ODE45_B5: f32 = -2187.0/6784.0;
   |       ^^^^^^^^

warning: constant `ODE45_B6` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:50:7
   |
50 | const ODE45_B6: f32 = 11.0/84.0;
   |       ^^^^^^^^

warning: constant `ODE45_B1E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:55:7
   |
55 | const ODE45_B1E: f32 = 5179.0/57600.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B3E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:57:7
   |
57 | const ODE45_B3E: f32 = 7571.0/16695.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B4E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:58:7
   |
58 | const ODE45_B4E: f32 = 393.0/640.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B5E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:59:7
   |
59 | const ODE45_B5E: f32 = -92097.0/339200.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B6E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:60:7
   |
60 | const ODE45_B6E: f32 = 187.0/2100.0;
   |       ^^^^^^^^^

warning: constant `ODE45_B7E` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/diffeq/ode_net_f32.rs:61:7
   |
61 | const ODE45_B7E: f32 = 1.0/40.0;
   |       ^^^^^^^^^

warning: constant `LOWER_PROB` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:87:7
   |
87 | const LOWER_PROB: f64 = 0.3;
   |       ^^^^^^^^^^

warning: constant `HIGHER_PROB` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:88:7
   |
88 | const HIGHER_PROB: f64 = 0.7;
   |       ^^^^^^^^^^^

warning: constant `LR_BUFFER` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:26:7
   |
26 | const LR_BUFFER: usize = 20;
   |       ^^^^^^^^^

warning: constant `LOWER_PROB` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:87:7
   |
87 | const LOWER_PROB: f32 = 0.3;
   |       ^^^^^^^^^^

warning: constant `HIGHER_PROB` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:88:7
   |
88 | const HIGHER_PROB: f32 = 0.7;
   |       ^^^^^^^^^^^

warning: constant `LR_BUFFER` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:26:7
   |
26 | const LR_BUFFER: usize = 20;
   |       ^^^^^^^^^

warning: constant `NEURON_GEN_SIZE` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:47:7
   |
47 | const NEURON_GEN_SIZE: u64 = 10000;
   |       ^^^^^^^^^^^^^^^

warning: constant `NEURON_GEN_SIZE` is never used
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:47:7
   |
47 | const NEURON_GEN_SIZE: u64 = 10000;
   |       ^^^^^^^^^^^^^^^

warning: constant `LR_MAX` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:191:7
    |
191 | const LR_MAX: f32 = 1.0;
    |       ^^^^^^

warning: constant `LR_BUFFER` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:192:7
    |
192 | const LR_BUFFER: usize = 20;
    |       ^^^^^^^^^

warning: constant `LARGE_POS_NUM_f32` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:193:7
    |
193 | const LARGE_POS_NUM_f32: f32 = 1.0e9;
    |       ^^^^^^^^^^^^^^^^^

warning: constant `INOUT_FACTOR` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:196:7
    |
196 | const INOUT_FACTOR: f32 = 0.15;
    |       ^^^^^^^^^^^^

warning: constant `PACKING_FACTOR` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:197:7
    |
197 | const PACKING_FACTOR: f32 = 0.02;
    |       ^^^^^^^^^^^^^^

warning: constant `LARGE_POS_NUM_u64` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:143:7
    |
143 | const LARGE_POS_NUM_u64: u64 = 1000000000;
    |       ^^^^^^^^^^^^^^^^^

warning: constant `LR_MAX` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:191:7
    |
191 | const LR_MAX: f64 = 1.0;
    |       ^^^^^^

warning: constant `LR_BUFFER` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:192:7
    |
192 | const LR_BUFFER: usize = 20;
    |       ^^^^^^^^^

warning: constant `LARGE_POS_NUM_f64` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:193:7
    |
193 | const LARGE_POS_NUM_f64: f64 = 1.0e9;
    |       ^^^^^^^^^^^^^^^^^

warning: constant `INOUT_FACTOR` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:196:7
    |
196 | const INOUT_FACTOR: f64 = 0.15;
    |       ^^^^^^^^^^^^

warning: constant `PACKING_FACTOR` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:197:7
    |
197 | const PACKING_FACTOR: f64 = 0.02;
    |       ^^^^^^^^^^^^^^

warning: constant `LARGE_POS_NUM_u64` is never used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:143:7
    |
143 | const LARGE_POS_NUM_u64: u64 = 1000000000;
    |       ^^^^^^^^^^^^^^^^^

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/measure_f64.rs:8:7
  |
8 | const two: f64 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`
  |
  = note: `#[warn(non_upper_case_globals)]` on by default

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/measure_f32.rs:8:7
  |
8 | const two: f32 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/measure_f16.rs:10:7
   |
10 | const two: half::f16 = half::f16::from_f32_const(2.0f32) ;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `LARGE_POS_NUM_f64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:83:7
   |
83 | const LARGE_POS_NUM_f64: f64 = 1.0e9;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F64`

warning: constant `SMALL_POS_NUM_f64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:84:7
   |
84 | const SMALL_POS_NUM_f64: f64 = 1.0e-6;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `SMALL_POS_NUM_F64`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:91:7
   |
91 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:95:7
   |
95 | const high: f64 = 1000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `low` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:96:7
   |
96 | const low: f64 = -1000000.0;
   |       ^^^ help: convert the identifier to upper case: `LOW`

warning: constant `high_u64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:99:7
   |
99 | const high_u64: u64 = 1000000;
   |       ^^^^^^^^ help: convert the identifier to upper case: `HIGH_U64`

warning: constant `low_u64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:100:7
    |
100 | const low_u64: u64 = 0;
    |       ^^^^^^^ help: convert the identifier to upper case: `LOW_U64`

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:901:2
    |
901 |     writeln!(fileInfo, "{}", saveInfo.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f64.rs:1546:4
     |
1546 |             std::fs::remove_file(cur_path);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
     |
1546 |             let _ = std::fs::remove_file(cur_path);
     |             +++++++

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:4:7
  |
4 | const two: f64 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:5:7
  |
5 | const one: f64 = 1.0;
  |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `epsilon` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:6:7
  |
6 | const epsilon: f64 = 1.0e-20;
  |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `epsilon2` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:7:7
  |
7 | const epsilon2: f64 = 2.0e-20;
  |       ^^^^^^^^ help: convert the identifier to upper case: `EPSILON2`

warning: constant `zero` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:9:7
  |
9 | const zero: f64 = 0.0;
  |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f64.rs:10:7
   |
10 | const high: f64 = 1000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/gd_f64.rs:3:7
  |
3 | const two: f64 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/gd_f64.rs:4:7
  |
4 | const one: f64 = 1.0;
  |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `epsilon` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/gd_f64.rs:5:7
  |
5 | const epsilon: f64 = 1.0e-8;
  |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `one` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:8:7
  |
8 | const one: f64 = 1.0;
  |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `onehalf` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:9:7
  |
9 | const onehalf: f64 = 0.5;
  |       ^^^^^^^ help: convert the identifier to upper case: `ONEHALF`

warning: constant `LARGE_POS_NUM_f64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:27:7
   |
27 | const LARGE_POS_NUM_f64: f64 = 1.0e9;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F64`

warning: constant `LARGE_POS_NUM_u64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f64.rs:28:7
   |
28 | const LARGE_POS_NUM_u64: u64 = 1000000000;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_U64`

warning: constant `LARGE_POS_NUM_f32` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:83:7
   |
83 | const LARGE_POS_NUM_f32: f32 = 1.0e9;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F32`

warning: constant `SMALL_POS_NUM_f32` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:84:7
   |
84 | const SMALL_POS_NUM_f32: f32 = 1.0e-6;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `SMALL_POS_NUM_F32`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:91:7
   |
91 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:95:7
   |
95 | const high: f32 = 1000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `low` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:96:7
   |
96 | const low: f32 = -1000000.0;
   |       ^^^ help: convert the identifier to upper case: `LOW`

warning: constant `high_u64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:99:7
   |
99 | const high_u64: u64 = 1000000;
   |       ^^^^^^^^ help: convert the identifier to upper case: `HIGH_U64`

warning: constant `low_u64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:100:7
    |
100 | const low_u64: u64 = 0;
    |       ^^^^^^^ help: convert the identifier to upper case: `LOW_U64`

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:901:2
    |
901 |     writeln!(fileInfo, "{}", saveInfo.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/evolution_f32.rs:1546:4
     |
1546 |             std::fs::remove_file(cur_path);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
     |
1546 |             let _ = std::fs::remove_file(cur_path);
     |             +++++++

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:4:7
  |
4 | const two: f32 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:5:7
  |
5 | const one: f32 = 1.0;
  |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `epsilon` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:6:7
  |
6 | const epsilon: f32 = 1.0e-20;
  |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `epsilon2` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:7:7
  |
7 | const epsilon2: f32 = 2.0e-20;
  |       ^^^^^^^^ help: convert the identifier to upper case: `EPSILON2`

warning: constant `zero` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:9:7
  |
9 | const zero: f32 = 0.0;
  |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/loss_f32.rs:10:7
   |
10 | const high: f32 = 1000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/gd_f32.rs:3:7
  |
3 | const two: f32 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/gd_f32.rs:4:7
  |
4 | const one: f32 = 1.0;
  |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `epsilon` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/gd_f32.rs:5:7
  |
5 | const epsilon: f32 = 1.0e-8;
  |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `one` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:8:7
  |
8 | const one: f32 = 1.0;
  |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `onehalf` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:9:7
  |
9 | const onehalf: f32 = 0.5;
  |       ^^^^^^^ help: convert the identifier to upper case: `ONEHALF`

warning: constant `LARGE_POS_NUM_f32` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:27:7
   |
27 | const LARGE_POS_NUM_f32: f32 = 1.0e9;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F32`

warning: constant `LARGE_POS_NUM_u64` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/optimal/control_f32.rs:28:7
   |
28 | const LARGE_POS_NUM_u64: u64 = 1000000000;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_U64`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:16:7
   |
16 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f64.rs:19:7
   |
19 | const one: f64 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `zero` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f64.rs:5:7
  |
5 | const zero: f64 = 0.0;
  |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `high` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f64.rs:6:7
  |
6 | const high: f64 = 1000000.0;
  |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f64.rs:7:7
  |
7 | const two: f64 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:14:7
   |
14 | const zero: f64 = 0.0;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f64.rs:16:7
   |
16 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:16:7
   |
16 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/network_f32.rs:19:7
   |
19 | const one: f32 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `zero` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f32.rs:5:7
  |
5 | const zero: f32 = 0.0;
  |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `high` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f32.rs:6:7
  |
6 | const high: f32 = 1000000.0;
  |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/activation_f32.rs:7:7
  |
7 | const two: f32 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:14:7
   |
14 | const zero: f32 = 0.0;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/neural/weight_share_f32.rs:16:7
   |
16 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f64.rs:13:7
   |
13 | const two: f64 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f64.rs:14:7
   |
14 | const one: f64 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `epsilon` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f64.rs:16:7
   |
16 | const epsilon: f64 = 0.0001;
   |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/distance_f64.rs:6:7
  |
6 | const two: f64 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:36:7
   |
36 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:39:7
   |
39 | const high: f64 = 10000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `neuron_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:41:7
   |
41 | const neuron_rad_factor: f64 = 1.1;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `NEURON_RAD_FACTOR`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:43:7
   |
43 | const two: f64 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:44:7
   |
44 | const one: f64 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `onehalf` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:45:7
   |
45 | const onehalf: f64 = 0.5;
   |       ^^^^^^^ help: convert the identifier to upper case: `ONEHALF`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f64.rs:46:7
   |
46 | const zero: u32 = 0;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:14:7
   |
14 | const high: f64 = 10000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `neuron_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:16:7
   |
16 | const neuron_rad_factor: f64 = 1.1;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `NEURON_RAD_FACTOR`

warning: constant `push` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f64.rs:17:7
   |
17 | const push: f64 = 100.0;
   |       ^^^^ help: convert the identifier to upper case: `PUSH`

warning: constant `input_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:92:7
   |
92 | const input_factor: f64 = 0.05;
   |       ^^^^^^^^^^^^ help: convert the identifier to upper case: `INPUT_FACTOR`

warning: constant `output_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:93:7
   |
93 | const output_factor: f64 = 0.09;
   |       ^^^^^^^^^^^^^ help: convert the identifier to upper case: `OUTPUT_FACTOR`

warning: constant `sphere_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:95:7
   |
95 | const sphere_rad_factor: f64 = 1.1;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `SPHERE_RAD_FACTOR`

warning: constant `con_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:96:7
   |
96 | const con_rad_factor: f64 = 1.4;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `CON_RAD_FACTOR`

warning: constant `neuron_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:97:7
   |
97 | const neuron_rad_factor: f64 = 1.14;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `NEURON_RAD_FACTOR`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:98:7
   |
98 | const high: f64 = 10000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:99:7
   |
99 | const zero: bool = false;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `COO_find_limit` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f64.rs:101:7
    |
101 | const COO_find_limit: u64 = 1500000000;
    |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:20:7
   |
20 | const two: f64 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:21:7
   |
21 | const one: f64 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:22:7
   |
22 | const zero: f64 = 0.0;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `epsilon` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:24:7
   |
24 | const epsilon: f64 = 1.0e-3;
   |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `oneminuseps` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:26:7
   |
26 | const oneminuseps: f64 = one - epsilon;
   |       ^^^^^^^^^^^ help: convert the identifier to upper case: `ONEMINUSEPS`

warning: constant `epsilon2` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f64.rs:34:7
   |
34 | const epsilon2: f64 = 1.0e-8;
   |       ^^^^^^^^ help: convert the identifier to upper case: `EPSILON2`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f32.rs:13:7
   |
13 | const two: f32 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f32.rs:14:7
   |
14 | const one: f32 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `epsilon` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/construct_f32.rs:16:7
   |
16 | const epsilon: f32 = 0.0001;
   |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `two` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/distance_f32.rs:6:7
  |
6 | const two: f32 = 2.0;
  |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:36:7
   |
36 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:39:7
   |
39 | const high: f32 = 10000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `neuron_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:41:7
   |
41 | const neuron_rad_factor: f32 = 1.1;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `NEURON_RAD_FACTOR`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:43:7
   |
43 | const two: f32 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:44:7
   |
44 | const one: f32 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `onehalf` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:45:7
   |
45 | const onehalf: f32 = 0.5;
   |       ^^^^^^^ help: convert the identifier to upper case: `ONEHALF`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/initial_f32.rs:46:7
   |
46 | const zero: u32 = 0;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:14:7
   |
14 | const high: f32 = 10000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `neuron_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:16:7
   |
16 | const neuron_rad_factor: f32 = 1.1;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `NEURON_RAD_FACTOR`

warning: constant `push` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/dynamic_f32.rs:17:7
   |
17 | const push: f32 = 100.0;
   |       ^^^^ help: convert the identifier to upper case: `PUSH`

warning: constant `input_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:92:7
   |
92 | const input_factor: f32 = 0.05;
   |       ^^^^^^^^^^^^ help: convert the identifier to upper case: `INPUT_FACTOR`

warning: constant `output_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:93:7
   |
93 | const output_factor: f32 = 0.09;
   |       ^^^^^^^^^^^^^ help: convert the identifier to upper case: `OUTPUT_FACTOR`

warning: constant `sphere_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:95:7
   |
95 | const sphere_rad_factor: f32 = 1.1;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `SPHERE_RAD_FACTOR`

warning: constant `con_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:96:7
   |
96 | const con_rad_factor: f32 = 1.4;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `CON_RAD_FACTOR`

warning: constant `neuron_rad_factor` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:97:7
   |
97 | const neuron_rad_factor: f32 = 1.14;
   |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `NEURON_RAD_FACTOR`

warning: constant `high` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:98:7
   |
98 | const high: f32 = 10000000.0;
   |       ^^^^ help: convert the identifier to upper case: `HIGH`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:99:7
   |
99 | const zero: bool = false;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `COO_find_limit` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/update_f32.rs:101:7
    |
101 | const COO_find_limit: u64 = 1500000000;
    |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:20:7
   |
20 | const two: f32 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `one` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:21:7
   |
21 | const one: f32 = 1.0;
   |       ^^^ help: convert the identifier to upper case: `ONE`

warning: constant `zero` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:22:7
   |
22 | const zero: f32 = 0.0;
   |       ^^^^ help: convert the identifier to upper case: `ZERO`

warning: constant `epsilon` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:24:7
   |
24 | const epsilon: f32 = 1.0e-3;
   |       ^^^^^^^ help: convert the identifier to upper case: `EPSILON`

warning: constant `oneminuseps` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:26:7
   |
26 | const oneminuseps: f32 = one - epsilon;
   |       ^^^^^^^^^^^ help: convert the identifier to upper case: `ONEMINUSEPS`

warning: constant `epsilon2` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/physics/raytrace_f32.rs:34:7
   |
34 | const epsilon2: f32 = 1.0e-8;
   |       ^^^^^^^^ help: convert the identifier to upper case: `EPSILON2`

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:171:29
    |
171 |     let targetstr = filepath.clone().replace(".csv", "");
    |                             ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed
    = note: `#[warn(noop_method_call)]` on by default

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:193:31
    |
193 |                 let elem = tmp.clone().parse::<f64>().unwrap();
    |                               ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:566:2
    |
566 |     writeln!(file0, "{}", wtr0.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:585:2
    |
585 |     writeln!(file0, "{}", wtr0);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f64.rs:755:2
    |
755 |     writeln!(file0, "{}", wtr0.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:171:29
    |
171 |     let targetstr = filepath.clone().replace(".csv", "");
    |                             ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:193:31
    |
193 |                 let elem = tmp.clone().parse::<f32>().unwrap();
    |                               ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:566:2
    |
566 |     writeln!(file0, "{}", wtr0.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:585:2
    |
585 |     writeln!(file0, "{}", wtr0);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_f32.rs:755:2
    |
755 |     writeln!(file0, "{}", wtr0.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_i32.rs:128:2
    |
128 |     writeln!(file0, "{}", wtr0.join("\n"));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: call to `.clone()` on a reference in this situation does nothing
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_u64.rs:87:29
   |
87 |     let targetstr = filepath.clone().replace(".csv", "");
   |                             ^^^^^^^^ help: remove this redundant call
   |
   = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/export/dataloader_u64.rs:109:31
    |
109 |                 let elem = tmp.clone().parse::<u64>().unwrap();
    |                               ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:16:7
   |
16 | const two: f64 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f64.rs:17:7
   |
17 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `two` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:16:7
   |
16 | const two: f32 = 2.0;
   |       ^^^ help: convert the identifier to upper case: `TWO`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/adjacency_f32.rs:17:7
   |
17 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `COO_find_limit` should have an upper case name
 --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/tree_i32.rs:9:7
  |
9 | const COO_find_limit: u64 = 1500000000;
  |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f64.rs:28:7
   |
28 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `COO_find_limit` should have an upper case name
  --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/graph/path_f32.rs:28:7
   |
28 | const COO_find_limit: u64 = 1500000000;
   |       ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `COO_FIND_LIMIT`

warning: constant `LARGE_POS_NUM_f32` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:193:7
    |
193 | const LARGE_POS_NUM_f32: f32 = 1.0e9;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F32`

warning: constant `LARGE_POS_NUM_u64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:194:7
    |
194 | const LARGE_POS_NUM_u64: u64 = 1000000000;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_U64`

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:818:21
    |
818 |         dir_path: dir_path.clone().to_string(),
    |                           ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: unused `Result` that must be used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1063:5
     |
1063 |                 std::fs::remove_file((*arch_search).evolution_info.cur_path.clone());
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
     |
1063 |                 let _ = std::fs::remove_file((*arch_search).evolution_info.cur_path.clone());
     |                 +++++++

warning: call to `.clone()` on a reference in this situation does nothing
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f32.rs:1856:21
     |
1856 |         dir_path: dir_path.clone().to_string(),
     |                           ^^^^^^^^ help: remove this redundant call
     |
     = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: constant `LARGE_POS_NUM_f32` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:142:7
    |
142 | const LARGE_POS_NUM_f32: f32 = 1.0e9;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F32`

warning: constant `LARGE_POS_NUM_u64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f32.rs:143:7
    |
143 | const LARGE_POS_NUM_u64: u64 = 1000000000;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_U64`

warning: constant `LARGE_POS_NUM_f64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:193:7
    |
193 | const LARGE_POS_NUM_f64: f64 = 1.0e9;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F64`

warning: constant `LARGE_POS_NUM_u64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:194:7
    |
194 | const LARGE_POS_NUM_u64: u64 = 1000000000;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_U64`

warning: call to `.clone()` on a reference in this situation does nothing
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:818:21
    |
818 |         dir_path: dir_path.clone().to_string(),
    |                           ^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: unused `Result` that must be used
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1063:5
     |
1063 |                 std::fs::remove_file((*arch_search).evolution_info.cur_path.clone());
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
     |
1063 |                 let _ = std::fs::remove_file((*arch_search).evolution_info.cur_path.clone());
     |                 +++++++

warning: call to `.clone()` on a reference in this situation does nothing
    --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/automatic_f64.rs:1856:21
     |
1856 |         dir_path: dir_path.clone().to_string(),
     |                           ^^^^^^^^ help: remove this redundant call
     |
     = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed

warning: constant `LARGE_POS_NUM_f64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:142:7
    |
142 | const LARGE_POS_NUM_f64: f64 = 1.0e9;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_F64`

warning: constant `LARGE_POS_NUM_u64` should have an upper case name
   --> /home/hbui/Downloads/RayBNN_Python/raybnn/src/interface/autotrain_f64.rs:143:7
    |
143 | const LARGE_POS_NUM_u64: u64 = 1000000000;
    |       ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case (notice the capitalization): `LARGE_POS_NUM_U64`

warning: `raybnn` (lib) generated 2326 warnings (run `cargo fix --lib -p raybnn` to apply 424 suggestions)
   Compiling raybnn_python v0.1.2 (/home/hbui/Downloads/RayBNN_Python/Rust_Code)
warning: unused imports: `PyArrayDyn` and `ToPyArray`
 --> src/lib.rs:4:32
  |
4 | use numpy::{self, IntoPyArray, PyArrayDyn, ToPyArray};
  |                                ^^^^^^^^^^  ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Array`, `Ix2`, and `Zip`
 --> src/lib.rs:5:22
  |
5 | use numpy::ndarray::{Zip, Array, Ix2};
  |                      ^^^  ^^^^^  ^^^

warning: unused imports: `PyArray` and `PyReadonlyArray1`
 --> src/lib.rs:6:87
  |
6 | use numpy::{PyReadonlyArray3, PyArray4, PyArray2, PyReadonlyArray4, PyReadonlyArray2, PyArray, PyReadonlyArray1};
  |                                                                                       ^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `PyObject`
 --> src/lib.rs:7:57
  |
7 | use pyo3::{pymodule, types::PyModule, PyResult, Python, PyObject, PyAny, Py};
  |                                                         ^^^^^^^^

warning: unused import: `pyo3::prelude::*`
 --> src/lib.rs:8:5
  |
8 | use pyo3::prelude::*;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `pyo3::IntoPy`
 --> src/lib.rs:9:5
  |
9 | use pyo3::IntoPy;
  |     ^^^^^^^^^^^^

warning: unused import: `pyo3::types::IntoPyDict`
  --> src/lib.rs:10:5
   |
10 | use pyo3::types::IntoPyDict;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `numpy::npyffi::NPY_ORDER::NPY_FORTRANORDER`
  --> src/lib.rs:12:5
   |
12 | use numpy::npyffi::NPY_ORDER::NPY_FORTRANORDER;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/lib.rs:24:5
   |
24 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/lib.rs:291:7
    |
291 |         let mut arch_search = raybnn::interface::automatic_f32::create_start_archtecture2(
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `train_y_dims`
   --> src/lib.rs:432:7
    |
432 |         let train_y_dims = train_y.shape().to_vec();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_train_y_dims`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `crossval_y_dims`
   --> src/lib.rs:435:7
    |
435 |         let crossval_y_dims = crossval_y.shape().to_vec();
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_crossval_y_dims`

warning: value assigned to `X` is never read
   --> src/lib.rs:465:12
    |
465 |             let mut X = Vec::new();
    |                     ^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `Y` is never read
   --> src/lib.rs:466:12
    |
466 |             let mut Y = Vec::new();
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `X` is never read
   --> src/lib.rs:499:12
    |
499 |             let mut X = Vec::new();
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `Y` is never read
   --> src/lib.rs:500:12
    |
500 |             let mut Y = Vec::new();
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `X` is never read
   --> src/lib.rs:658:12
    |
658 |             let mut X = Vec::new();
    |                     ^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/lib.rs:752:7
    |
752 |         let mut a = arrayfire::Array::new(&x, arrayfire::Dim4::new(&[x_dims[0] as u64, x_dims[1] as u64, x_dims[2] as u64, 1]));
    |             ----^
    |             |
    |             help: remove this `mut`

warning: unused variable: `y`
   --> src/lib.rs:770:9
    |
770 |         y: PyReadonlyArray2<'py, f64>,
    |         ^ help: if this is intentional, prefix it with an underscore: `_y`

warning: value assigned to `train_x_af` is never read
   --> src/lib.rs:858:11
    |
858 |         let mut train_x_af =  arrayfire::constant::<f32>(0.0,temp_dims);
    |                 ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `train_x_rust_vec` is never read
   --> src/lib.rs:865:12
    |
865 |             let mut train_x_rust_vec = Vec::new();
    |                     ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/lib.rs:810:7
    |
810 |         let mut arch_search: raybnn::interface::automatic_f32::arch_search_type = depythonize(model.as_ref(py)).unwrap();
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/lib.rs:830:7
    |
830 |         let mut WRowIdxCSR = &arch_search.neural_network.WRowIdxCSR;
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/lib.rs:831:7
    |
831 |         let mut WColIdx = &arch_search.neural_network.WColIdx;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/lib.rs:894:7
    |
894 |         let mut batch_idx = 0;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable `WRowIdxCOO` should have a snake case name
   --> src/lib.rs:131:11
    |
131 |         let mut WRowIdxCOO = raybnn::graph::large_sparse_i32::CSR_to_COO(&arch_search.neural_network.WRowIdxCSR);
    |                 ^^^^^^^^^^ help: convert the identifier to snake case: `wrow_idx_coo`
    |
    = note: `#[warn(non_snake_case)]` on by default

warning: variable `WValuesdims0` should have a snake case name
   --> src/lib.rs:138:7
    |
138 |         let WValuesdims0 =  (arch_search).neural_network.WColIdx.dims()[0];
    |             ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `wvaluesdims0`

warning: variable `Hdims0` should have a snake case name
   --> src/lib.rs:142:7
    |
142 |         let Hdims0 =  (network_paramsdims0 -  WValuesdims0)/6; 
    |             ^^^^^^ help: convert the identifier to snake case: `hdims0`

warning: variable `Wstart` should have a snake case name
   --> src/lib.rs:146:7
    |
146 |         let Wstart = 0;
    |             ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `wstart`

warning: variable `Wend` should have a snake case name
   --> src/lib.rs:147:7
    |
147 |         let Wend = (WValuesdims0  as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case (notice the capitalization): `wend`

warning: variable `Hstart` should have a snake case name
   --> src/lib.rs:149:7
    |
149 |         let Hstart = Wend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `hstart`

warning: variable `Hend` should have a snake case name
   --> src/lib.rs:150:7
    |
150 |         let Hend = Hstart + (Hdims0 as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `hend`

warning: variable `Astart` should have a snake case name
   --> src/lib.rs:152:7
    |
152 |         let Astart = Hend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `astart`

warning: variable `Aend` should have a snake case name
   --> src/lib.rs:153:7
    |
153 |         let Aend = Astart + (Hdims0 as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `aend`

warning: variable `Bstart` should have a snake case name
   --> src/lib.rs:155:7
    |
155 |         let Bstart = Aend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `bstart`

warning: variable `Bend` should have a snake case name
   --> src/lib.rs:156:7
    |
156 |         let Bend = Bstart + (Hdims0 as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `bend`

warning: variable `Cstart` should have a snake case name
   --> src/lib.rs:158:7
    |
158 |         let Cstart = Bend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `cstart`

warning: variable `Cend` should have a snake case name
   --> src/lib.rs:159:7
    |
159 |         let Cend = Cstart + (Hdims0 as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case (notice the capitalization): `cend`

warning: variable `Dstart` should have a snake case name
   --> src/lib.rs:161:7
    |
161 |         let Dstart = Cend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `dstart`

warning: variable `Dend` should have a snake case name
   --> src/lib.rs:162:7
    |
162 |         let Dend = Dstart + (Hdims0 as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `dend`

warning: variable `Estart` should have a snake case name
   --> src/lib.rs:164:7
    |
164 |         let Estart = Dend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `estart`

warning: variable `Eend` should have a snake case name
   --> src/lib.rs:165:7
    |
165 |         let Eend = Estart + (Hdims0 as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `eend`

warning: variable `Wseqs` should have a snake case name
   --> src/lib.rs:168:7
    |
168 |         let Wseqs = [arrayfire::Seq::new(Wstart as i32, Wend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case (notice the capitalization): `wseqs`

warning: variable `Hseqs` should have a snake case name
   --> src/lib.rs:169:7
    |
169 |         let Hseqs = [arrayfire::Seq::new(Hstart as i32, Hend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `hseqs`

warning: variable `Aseqs` should have a snake case name
   --> src/lib.rs:170:7
    |
170 |         let Aseqs = [arrayfire::Seq::new(Astart as i32, Aend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `aseqs`

warning: variable `Bseqs` should have a snake case name
   --> src/lib.rs:171:7
    |
171 |         let Bseqs = [arrayfire::Seq::new(Bstart as i32, Bend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `bseqs`

warning: variable `Cseqs` should have a snake case name
   --> src/lib.rs:172:7
    |
172 |         let Cseqs = [arrayfire::Seq::new(Cstart as i32, Cend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case (notice the capitalization): `cseqs`

warning: variable `Dseqs` should have a snake case name
   --> src/lib.rs:173:7
    |
173 |         let Dseqs = [arrayfire::Seq::new(Dstart as i32, Dend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `dseqs`

warning: variable `Eseqs` should have a snake case name
   --> src/lib.rs:174:7
    |
174 |         let Eseqs = [arrayfire::Seq::new(Estart as i32, Eend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `eseqs`

warning: variable `WValues` should have a snake case name
   --> src/lib.rs:178:11
    |
178 |         let mut WValues = arrayfire::index(&((arch_search).neural_network.network_params), &Wseqs);
    |                 ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `wvalues`

warning: variable `H` should have a snake case name
   --> src/lib.rs:179:7
    |
179 |         let H = arrayfire::index(&((arch_search).neural_network.network_params), &Hseqs);
    |             ^ help: convert the identifier to snake case: `h`

warning: variable `A` should have a snake case name
   --> src/lib.rs:180:7
    |
180 |         let A = arrayfire::index(&((arch_search).neural_network.network_params), &Aseqs);
    |             ^ help: convert the identifier to snake case: `a`

warning: variable `B` should have a snake case name
   --> src/lib.rs:181:7
    |
181 |         let B = arrayfire::index(&((arch_search).neural_network.network_params), &Bseqs);
    |             ^ help: convert the identifier to snake case: `b`

warning: variable `C` should have a snake case name
   --> src/lib.rs:182:7
    |
182 |         let C = arrayfire::index(&((arch_search).neural_network.network_params), &Cseqs);
    |             ^ help: convert the identifier to snake case (notice the capitalization): `c`

warning: variable `D` should have a snake case name
   --> src/lib.rs:183:7
    |
183 |         let D = arrayfire::index(&((arch_search).neural_network.network_params), &Dseqs);
    |             ^ help: convert the identifier to snake case: `d`

warning: variable `E` should have a snake case name
   --> src/lib.rs:184:7
    |
184 |         let E = arrayfire::index(&((arch_search).neural_network.network_params), &Eseqs);
    |             ^ help: convert the identifier to snake case: `e`

warning: variable `Wstart` should have a snake case name
   --> src/lib.rs:212:7
    |
212 |         let Wstart = 0;
    |             ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `wstart`

warning: variable `Wend` should have a snake case name
   --> src/lib.rs:213:7
    |
213 |         let Wend = (WValues.dims()[0]  as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case (notice the capitalization): `wend`

warning: variable `Hstart` should have a snake case name
   --> src/lib.rs:215:7
    |
215 |         let Hstart = Wend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `hstart`

warning: variable `Hend` should have a snake case name
   --> src/lib.rs:216:7
    |
216 |         let Hend = Hstart + (H.dims()[0] as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `hend`

warning: variable `Astart` should have a snake case name
   --> src/lib.rs:218:7
    |
218 |         let Astart = Hend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `astart`

warning: variable `Aend` should have a snake case name
   --> src/lib.rs:219:7
    |
219 |         let Aend = Astart + (A.dims()[0] as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `aend`

warning: variable `Bstart` should have a snake case name
   --> src/lib.rs:221:7
    |
221 |         let Bstart = Aend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `bstart`

warning: variable `Bend` should have a snake case name
   --> src/lib.rs:222:7
    |
222 |         let Bend = Bstart + (B.dims()[0] as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `bend`

warning: variable `Cstart` should have a snake case name
   --> src/lib.rs:224:7
    |
224 |         let Cstart = Bend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `cstart`

warning: variable `Cend` should have a snake case name
   --> src/lib.rs:225:7
    |
225 |         let Cend = Cstart + (C.dims()[0] as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case (notice the capitalization): `cend`

warning: variable `Dstart` should have a snake case name
   --> src/lib.rs:227:7
    |
227 |         let Dstart = Cend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `dstart`

warning: variable `Dend` should have a snake case name
   --> src/lib.rs:228:7
    |
228 |         let Dend = Dstart + (D.dims()[0] as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `dend`

warning: variable `Estart` should have a snake case name
   --> src/lib.rs:230:7
    |
230 |         let Estart = Dend + 1; 
    |             ^^^^^^ help: convert the identifier to snake case: `estart`

warning: variable `Eend` should have a snake case name
   --> src/lib.rs:231:7
    |
231 |         let Eend = Estart + (E.dims()[0] as i64) - 1;
    |             ^^^^ help: convert the identifier to snake case: `eend`

warning: variable `Wseqs` should have a snake case name
   --> src/lib.rs:234:7
    |
234 |         let Wseqs = [arrayfire::Seq::new(Wstart as i32, Wend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case (notice the capitalization): `wseqs`

warning: variable `Hseqs` should have a snake case name
   --> src/lib.rs:235:7
    |
235 |         let Hseqs = [arrayfire::Seq::new(Hstart as i32, Hend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `hseqs`

warning: variable `Aseqs` should have a snake case name
   --> src/lib.rs:236:7
    |
236 |         let Aseqs = [arrayfire::Seq::new(Astart as i32, Aend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `aseqs`

warning: variable `Bseqs` should have a snake case name
   --> src/lib.rs:237:7
    |
237 |         let Bseqs = [arrayfire::Seq::new(Bstart as i32, Bend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `bseqs`

warning: variable `Cseqs` should have a snake case name
   --> src/lib.rs:238:7
    |
238 |         let Cseqs = [arrayfire::Seq::new(Cstart as i32, Cend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case (notice the capitalization): `cseqs`

warning: variable `Dseqs` should have a snake case name
   --> src/lib.rs:239:7
    |
239 |         let Dseqs = [arrayfire::Seq::new(Dstart as i32, Dend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `dseqs`

warning: variable `Eseqs` should have a snake case name
   --> src/lib.rs:240:7
    |
240 |         let Eseqs = [arrayfire::Seq::new(Estart as i32, Eend as i32, 1i32)];
    |             ^^^^^ help: convert the identifier to snake case: `eseqs`

warning: variable `traindata_X` should have a snake case name
   --> src/lib.rs:437:11
    |
437 |         let mut traindata_X: nohash_hasher::IntMap<u64, Vec<f32> > = nohash_hasher::IntMap::default();
    |                 ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `traindata_x`

warning: variable `traindata_Y` should have a snake case name
   --> src/lib.rs:438:11
    |
438 |         let mut traindata_Y: nohash_hasher::IntMap<u64, Vec<f32> > = nohash_hasher::IntMap::default();
    |                 ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `traindata_y`

warning: variable `validationdata_X` should have a snake case name
   --> src/lib.rs:440:11
    |
440 |         let mut validationdata_X: nohash_hasher::IntMap<u64, Vec<f32> > = nohash_hasher::IntMap::default();
    |                 ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `validationdata_x`

warning: variable `validationdata_Y` should have a snake case name
   --> src/lib.rs:441:11
    |
441 |         let mut validationdata_Y: nohash_hasher::IntMap<u64, Vec<f32> > = nohash_hasher::IntMap::default();
    |                 ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `validationdata_y`

warning: variable `Xslices` should have a snake case name
   --> src/lib.rs:455:7
    |
455 |         let Xslices = train_x_dims[2];
    |             ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `xslices`

warning: variable `X` should have a snake case name
   --> src/lib.rs:465:12
    |
465 |             let mut X = Vec::new();
    |                     ^ help: convert the identifier to snake case (notice the capitalization): `x`

warning: variable `Y` should have a snake case name
   --> src/lib.rs:466:12
    |
466 |             let mut Y = Vec::new();
    |                     ^ help: convert the identifier to snake case (notice the capitalization): `y`

warning: variable `X` should have a snake case name
   --> src/lib.rs:499:12
    |
499 |             let mut X = Vec::new();
    |                     ^ help: convert the identifier to snake case (notice the capitalization): `x`

warning: variable `Y` should have a snake case name
   --> src/lib.rs:500:12
    |
500 |             let mut Y = Vec::new();
    |                     ^ help: convert the identifier to snake case (notice the capitalization): `y`

warning: variable `validationdata_X` should have a snake case name
   --> src/lib.rs:645:11
    |
645 |         let mut validationdata_X: nohash_hasher::IntMap<u64, Vec<f32> > = nohash_hasher::IntMap::default();
    |                 ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `validationdata_x`

warning: variable `Xslices` should have a snake case name
   --> src/lib.rs:651:7
    |
651 |         let Xslices = test_x_dims[2];
    |             ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `xslices`

warning: variable `X` should have a snake case name
   --> src/lib.rs:658:12
    |
658 |             let mut X = Vec::new();
    |                     ^ help: convert the identifier to snake case (notice the capitalization): `x`

warning: variable `Yhat_out` should have a snake case name
   --> src/lib.rs:675:11
    |
675 |         let mut Yhat_out = nohash_hasher::IntMap::default();
    |                 ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `yhat_out`

warning: variable `Yhat_vec` should have a snake case name
   --> src/lib.rs:711:9
    |
711 |                 let Yhat_vec = Yhat_out[&idx].clone();
    |                     ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `yhat_vec`

warning: variable `Z_dims` should have a snake case name
   --> src/lib.rs:824:7
    |
824 |         let Z_dims = arrayfire::Dim4::new(&[neuron_size,batch_size,traj_steps,1]);
    |             ^^^^^^ help: convert the identifier to snake case (notice the capitalization): `z_dims`

warning: variable `Q` should have a snake case name
   --> src/lib.rs:827:11
    |
827 |         let mut Q = arrayfire::constant::<f32>(0.0,Z_dims);
    |                 ^ help: convert the identifier to snake case: `q`

warning: variable `Z` should have a snake case name
   --> src/lib.rs:828:11
    |
828 |         let mut Z = arrayfire::constant::<f32>(0.0,Z_dims);
    |                 ^ help: convert the identifier to snake case (notice the capitalization): `z`

warning: variable `WRowIdxCSR` should have a snake case name
   --> src/lib.rs:830:11
    |
830 |         let mut WRowIdxCSR = &arch_search.neural_network.WRowIdxCSR;
    |                 ^^^^^^^^^^ help: convert the identifier to snake case: `wrow_idx_csr`

warning: variable `WColIdx` should have a snake case name
   --> src/lib.rs:831:11
    |
831 |         let mut WColIdx = &arch_search.neural_network.WColIdx;
    |                 ^^^^^^^ help: convert the identifier to snake case: `wcol_idx`

warning: variable `Wseqs` should have a snake case name
   --> src/lib.rs:834:7
    |
834 |         let Wseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case (notice the capitalization): `wseqs`

warning: variable `Hseqs` should have a snake case name
   --> src/lib.rs:835:7
    |
835 |         let Hseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case: `hseqs`

warning: variable `Aseqs` should have a snake case name
   --> src/lib.rs:836:7
    |
836 |         let Aseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case: `aseqs`

warning: variable `Bseqs` should have a snake case name
   --> src/lib.rs:837:7
    |
837 |         let Bseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case: `bseqs`

warning: variable `Cseqs` should have a snake case name
   --> src/lib.rs:838:7
    |
838 |         let Cseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case (notice the capitalization): `cseqs`

warning: variable `Dseqs` should have a snake case name
   --> src/lib.rs:839:7
    |
839 |         let Dseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case: `dseqs`

warning: variable `Eseqs` should have a snake case name
   --> src/lib.rs:840:7
    |
840 |         let Eseqs: &[arrayfire::Seq<i32>; 1] = &[arrayfire::Seq::default()];
    |             ^^^^^ help: convert the identifier to snake case: `eseqs`

warning: `raybnn_python` (lib) generated 103 warnings (run `cargo fix --lib -p raybnn_python` to apply 15 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 7m 00s
📦 Built wheel for CPython 3.13 to /tmp/.tmp3JGF67/raybnn_python-0.1.2-cp313-cp313-linux_x86_64.whl
🛠 Installed raybnn_python-0.1.2
